// Klib ABI Dump
// Targets: [macosArm64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.apollographql.execution:apollo-execution-runtime>
abstract fun interface com.apollographql.execution/Resolver { // com.apollographql.execution/Resolver|null[0]
    abstract suspend fun resolve(com.apollographql.execution/ResolveInfo): kotlin/Any? // com.apollographql.execution/Resolver.resolve|resolve(com.apollographql.execution.ResolveInfo){}[0]
}
abstract fun interface com.apollographql.execution/RootResolver { // com.apollographql.execution/RootResolver|null[0]
    abstract fun resolveRoot(): kotlin/Any? // com.apollographql.execution/RootResolver.resolveRoot|resolveRoot(){}[0]
}
abstract fun interface com.apollographql.execution/TypeResolver { // com.apollographql.execution/TypeResolver|null[0]
    abstract fun resolveType(kotlin/Any?, com.apollographql.execution/ResolveTypeInfo): kotlin/String // com.apollographql.execution/TypeResolver.resolveType|resolveType(kotlin.Any?;com.apollographql.execution.ResolveTypeInfo){}[0]
}
abstract interface <#A: kotlin/Any?> com.apollographql.execution/Coercing { // com.apollographql.execution/Coercing|null[0]
    abstract fun deserialize(kotlin/Any?): #A // com.apollographql.execution/Coercing.deserialize|deserialize(kotlin.Any?){}[0]
    abstract fun parseLiteral(com.apollographql.apollo.ast/GQLValue): #A // com.apollographql.execution/Coercing.parseLiteral|parseLiteral(com.apollographql.apollo.ast.GQLValue){}[0]
    abstract fun serialize(#A): kotlin/Any? // com.apollographql.execution/Coercing.serialize|serialize(1:0){}[0]
}
abstract interface com.apollographql.execution.websocket/WebSocketHandler { // com.apollographql.execution.websocket/WebSocketHandler|null[0]
    abstract fun handleMessage(com.apollographql.execution.websocket/WebSocketMessage) // com.apollographql.execution.websocket/WebSocketHandler.handleMessage|handleMessage(com.apollographql.execution.websocket.WebSocketMessage){}[0]
}
abstract interface com.apollographql.execution/PersistedDocumentCache { // com.apollographql.execution/PersistedDocumentCache|null[0]
    abstract fun get(kotlin/String): com.apollographql.execution/PersistedDocument? // com.apollographql.execution/PersistedDocumentCache.get|get(kotlin.String){}[0]
    abstract fun put(kotlin/String, com.apollographql.execution/PersistedDocument) // com.apollographql.execution/PersistedDocumentCache.put|put(kotlin.String;com.apollographql.execution.PersistedDocument){}[0]
}
final class com.apollographql.execution.websocket/ConnectionInitError : com.apollographql.execution.websocket/ConnectionInitResult { // com.apollographql.execution.websocket/ConnectionInitError|null[0]
    constructor <init>(com.apollographql.apollo.api/Optional<kotlin/Any?> = ...) // com.apollographql.execution.websocket/ConnectionInitError.<init>|<init>(com.apollographql.apollo.api.Optional<kotlin.Any?>){}[0]
    final val payload // com.apollographql.execution.websocket/ConnectionInitError.payload|{}payload[0]
        final fun <get-payload>(): com.apollographql.apollo.api/Optional<kotlin/Any?> // com.apollographql.execution.websocket/ConnectionInitError.payload.<get-payload>|<get-payload>(){}[0]
}
final class com.apollographql.execution.websocket/SubscriptionWebSocketHandler : com.apollographql.execution.websocket/WebSocketHandler { // com.apollographql.execution.websocket/SubscriptionWebSocketHandler|null[0]
    constructor <init>(com.apollographql.execution/ExecutableSchema, kotlinx.coroutines/CoroutineScope, com.apollographql.apollo.api/ExecutionContext, kotlin/Function1<com.apollographql.execution.websocket/WebSocketMessage, kotlin/Unit>, kotlin.coroutines/SuspendFunction1<kotlin/Any?, com.apollographql.execution.websocket/ConnectionInitResult> = ...) // com.apollographql.execution.websocket/SubscriptionWebSocketHandler.<init>|<init>(com.apollographql.execution.ExecutableSchema;kotlinx.coroutines.CoroutineScope;com.apollographql.apollo.api.ExecutionContext;kotlin.Function1<com.apollographql.execution.websocket.WebSocketMessage,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<kotlin.Any?,com.apollographql.execution.websocket.ConnectionInitResult>){}[0]
    final fun close() // com.apollographql.execution.websocket/SubscriptionWebSocketHandler.close|close(){}[0]
    final fun handleMessage(com.apollographql.execution.websocket/WebSocketMessage) // com.apollographql.execution.websocket/SubscriptionWebSocketHandler.handleMessage|handleMessage(com.apollographql.execution.websocket.WebSocketMessage){}[0]
}
final class com.apollographql.execution.websocket/WebSocketBinaryMessage : com.apollographql.execution.websocket/WebSocketMessage { // com.apollographql.execution.websocket/WebSocketBinaryMessage|null[0]
    constructor <init>(kotlin/ByteArray) // com.apollographql.execution.websocket/WebSocketBinaryMessage.<init>|<init>(kotlin.ByteArray){}[0]
    final val data // com.apollographql.execution.websocket/WebSocketBinaryMessage.data|{}data[0]
        final fun <get-data>(): kotlin/ByteArray // com.apollographql.execution.websocket/WebSocketBinaryMessage.data.<get-data>|<get-data>(){}[0]
}
final class com.apollographql.execution.websocket/WebSocketTextMessage : com.apollographql.execution.websocket/WebSocketMessage { // com.apollographql.execution.websocket/WebSocketTextMessage|null[0]
    constructor <init>(kotlin/String) // com.apollographql.execution.websocket/WebSocketTextMessage.<init>|<init>(kotlin.String){}[0]
    final val data // com.apollographql.execution.websocket/WebSocketTextMessage.data|{}data[0]
        final fun <get-data>(): kotlin/String // com.apollographql.execution.websocket/WebSocketTextMessage.data.<get-data>|<get-data>(){}[0]
}
final class com.apollographql.execution/CompositeResolverBuilder { // com.apollographql.execution/CompositeResolverBuilder|null[0]
    constructor <init>() // com.apollographql.execution/CompositeResolverBuilder.<init>|<init>(){}[0]
    final class TypeBuilder { // com.apollographql.execution/CompositeResolverBuilder.TypeBuilder|null[0]
        constructor <init>() // com.apollographql.execution/CompositeResolverBuilder.TypeBuilder.<init>|<init>(){}[0]
        final fun field(kotlin/String, com.apollographql.execution/Resolver) // com.apollographql.execution/CompositeResolverBuilder.TypeBuilder.field|field(kotlin.String;com.apollographql.execution.Resolver){}[0]
    }
    final fun build(): com.apollographql.execution/Resolver // com.apollographql.execution/CompositeResolverBuilder.build|build(){}[0]
    final fun default(com.apollographql.execution/Resolver) // com.apollographql.execution/CompositeResolverBuilder.default|default(com.apollographql.execution.Resolver){}[0]
    final fun type(kotlin/String, kotlin/Function1<com.apollographql.execution/CompositeResolverBuilder.TypeBuilder, kotlin/Unit>) // com.apollographql.execution/CompositeResolverBuilder.type|type(kotlin.String;kotlin.Function1<com.apollographql.execution.CompositeResolverBuilder.TypeBuilder,kotlin.Unit>){}[0]
}
final class com.apollographql.execution/ErrorPersistedDocument : com.apollographql.execution/PersistedDocument { // com.apollographql.execution/ErrorPersistedDocument|null[0]
    constructor <init>(kotlin.collections/List<com.apollographql.apollo.ast/Issue>) // com.apollographql.execution/ErrorPersistedDocument.<init>|<init>(kotlin.collections.List<com.apollographql.apollo.ast.Issue>){}[0]
    final val issues // com.apollographql.execution/ErrorPersistedDocument.issues|{}issues[0]
        final fun <get-issues>(): kotlin.collections/List<com.apollographql.apollo.ast/Issue> // com.apollographql.execution/ErrorPersistedDocument.issues.<get-issues>|<get-issues>(){}[0]
}
final class com.apollographql.execution/ExecutableSchema { // com.apollographql.execution/ExecutableSchema|null[0]
    constructor <init>(com.apollographql.apollo.ast/Schema, kotlin.collections/Map<kotlin/String, com.apollographql.execution/Coercing<*>>, com.apollographql.execution/RootResolver?, com.apollographql.execution/RootResolver?, com.apollographql.execution/RootResolver?, com.apollographql.execution/Resolver, com.apollographql.execution/TypeResolver, com.apollographql.execution/PersistedDocumentCache?) // com.apollographql.execution/ExecutableSchema.<init>|<init>(com.apollographql.apollo.ast.Schema;kotlin.collections.Map<kotlin.String,com.apollographql.execution.Coercing<*>>;com.apollographql.execution.RootResolver?;com.apollographql.execution.RootResolver?;com.apollographql.execution.RootResolver?;com.apollographql.execution.Resolver;com.apollographql.execution.TypeResolver;com.apollographql.execution.PersistedDocumentCache?){}[0]
    final class Builder { // com.apollographql.execution/ExecutableSchema.Builder|null[0]
        constructor <init>() // com.apollographql.execution/ExecutableSchema.Builder.<init>|<init>(){}[0]
        final fun addCoercing(kotlin/String, com.apollographql.execution/Coercing<*>): com.apollographql.execution/ExecutableSchema.Builder // com.apollographql.execution/ExecutableSchema.Builder.addCoercing|addCoercing(kotlin.String;com.apollographql.execution.Coercing<*>){}[0]
        final fun build(): com.apollographql.execution/ExecutableSchema // com.apollographql.execution/ExecutableSchema.Builder.build|build(){}[0]
        final fun mutationRoot(com.apollographql.execution/RootResolver): com.apollographql.execution/ExecutableSchema.Builder // com.apollographql.execution/ExecutableSchema.Builder.mutationRoot|mutationRoot(com.apollographql.execution.RootResolver){}[0]
        final fun persistedDocumentCache(com.apollographql.execution/PersistedDocumentCache?): com.apollographql.execution/ExecutableSchema.Builder // com.apollographql.execution/ExecutableSchema.Builder.persistedDocumentCache|persistedDocumentCache(com.apollographql.execution.PersistedDocumentCache?){}[0]
        final fun queryRoot(com.apollographql.execution/RootResolver): com.apollographql.execution/ExecutableSchema.Builder // com.apollographql.execution/ExecutableSchema.Builder.queryRoot|queryRoot(com.apollographql.execution.RootResolver){}[0]
        final fun resolver(com.apollographql.execution/Resolver): com.apollographql.execution/ExecutableSchema.Builder // com.apollographql.execution/ExecutableSchema.Builder.resolver|resolver(com.apollographql.execution.Resolver){}[0]
        final fun schema(com.apollographql.apollo.ast/GQLDocument): com.apollographql.execution/ExecutableSchema.Builder // com.apollographql.execution/ExecutableSchema.Builder.schema|schema(com.apollographql.apollo.ast.GQLDocument){}[0]
        final fun schema(kotlin/String): com.apollographql.execution/ExecutableSchema.Builder // com.apollographql.execution/ExecutableSchema.Builder.schema|schema(kotlin.String){}[0]
        final fun subscriptionRoot(com.apollographql.execution/RootResolver): com.apollographql.execution/ExecutableSchema.Builder // com.apollographql.execution/ExecutableSchema.Builder.subscriptionRoot|subscriptionRoot(com.apollographql.execution.RootResolver){}[0]
        final fun typeResolver(com.apollographql.execution/TypeResolver): com.apollographql.execution/ExecutableSchema.Builder // com.apollographql.execution/ExecutableSchema.Builder.typeResolver|typeResolver(com.apollographql.execution.TypeResolver){}[0]
    }
    final fun subscribe(com.apollographql.execution/GraphQLRequest, com.apollographql.apollo.api/ExecutionContext = ...): kotlinx.coroutines.flow/Flow<com.apollographql.execution/SubscriptionEvent> // com.apollographql.execution/ExecutableSchema.subscribe|subscribe(com.apollographql.execution.GraphQLRequest;com.apollographql.apollo.api.ExecutionContext){}[0]
    final suspend fun execute(com.apollographql.execution/GraphQLRequest, com.apollographql.apollo.api/ExecutionContext = ...): com.apollographql.execution/GraphQLResponse // com.apollographql.execution/ExecutableSchema.execute|execute(com.apollographql.execution.GraphQLRequest;com.apollographql.apollo.api.ExecutionContext){}[0]
}
final class com.apollographql.execution/GraphQLRequest { // com.apollographql.execution/GraphQLRequest|null[0]
    final class Builder { // com.apollographql.execution/GraphQLRequest.Builder|null[0]
        constructor <init>() // com.apollographql.execution/GraphQLRequest.Builder.<init>|<init>(){}[0]
        final fun build(): com.apollographql.execution/GraphQLRequest // com.apollographql.execution/GraphQLRequest.Builder.build|build(){}[0]
        final fun document(kotlin/String?): com.apollographql.execution/GraphQLRequest.Builder // com.apollographql.execution/GraphQLRequest.Builder.document|document(kotlin.String?){}[0]
        final fun extensions(kotlin.collections/Map<kotlin/String, kotlin/Any?>?): com.apollographql.execution/GraphQLRequest.Builder // com.apollographql.execution/GraphQLRequest.Builder.extensions|extensions(kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
        final fun operationName(kotlin/String?): com.apollographql.execution/GraphQLRequest.Builder // com.apollographql.execution/GraphQLRequest.Builder.operationName|operationName(kotlin.String?){}[0]
        final fun variables(kotlin.collections/Map<kotlin/String, kotlin/Any?>?): com.apollographql.execution/GraphQLRequest.Builder // com.apollographql.execution/GraphQLRequest.Builder.variables|variables(kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
        final var document // com.apollographql.execution/GraphQLRequest.Builder.document|{}document[0]
            final fun <get-document>(): kotlin/String? // com.apollographql.execution/GraphQLRequest.Builder.document.<get-document>|<get-document>(){}[0]
            final fun <set-document>(kotlin/String?) // com.apollographql.execution/GraphQLRequest.Builder.document.<set-document>|<set-document>(kotlin.String?){}[0]
        final var extensions // com.apollographql.execution/GraphQLRequest.Builder.extensions|{}extensions[0]
            final fun <get-extensions>(): kotlin.collections/Map<kotlin/String, kotlin/Any?>? // com.apollographql.execution/GraphQLRequest.Builder.extensions.<get-extensions>|<get-extensions>(){}[0]
            final fun <set-extensions>(kotlin.collections/Map<kotlin/String, kotlin/Any?>?) // com.apollographql.execution/GraphQLRequest.Builder.extensions.<set-extensions>|<set-extensions>(kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
        final var operationName // com.apollographql.execution/GraphQLRequest.Builder.operationName|{}operationName[0]
            final fun <get-operationName>(): kotlin/String? // com.apollographql.execution/GraphQLRequest.Builder.operationName.<get-operationName>|<get-operationName>(){}[0]
            final fun <set-operationName>(kotlin/String?) // com.apollographql.execution/GraphQLRequest.Builder.operationName.<set-operationName>|<set-operationName>(kotlin.String?){}[0]
        final var variables // com.apollographql.execution/GraphQLRequest.Builder.variables|{}variables[0]
            final fun <get-variables>(): kotlin.collections/Map<kotlin/String, kotlin/Any?>? // com.apollographql.execution/GraphQLRequest.Builder.variables.<get-variables>|<get-variables>(){}[0]
            final fun <set-variables>(kotlin.collections/Map<kotlin/String, kotlin/Any?>?) // com.apollographql.execution/GraphQLRequest.Builder.variables.<set-variables>|<set-variables>(kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
    }
    final val document // com.apollographql.execution/GraphQLRequest.document|{}document[0]
        final fun <get-document>(): kotlin/String? // com.apollographql.execution/GraphQLRequest.document.<get-document>|<get-document>(){}[0]
    final val extensions // com.apollographql.execution/GraphQLRequest.extensions|{}extensions[0]
        final fun <get-extensions>(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.execution/GraphQLRequest.extensions.<get-extensions>|<get-extensions>(){}[0]
    final val operationName // com.apollographql.execution/GraphQLRequest.operationName|{}operationName[0]
        final fun <get-operationName>(): kotlin/String? // com.apollographql.execution/GraphQLRequest.operationName.<get-operationName>|<get-operationName>(){}[0]
    final val variables // com.apollographql.execution/GraphQLRequest.variables|{}variables[0]
        final fun <get-variables>(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.execution/GraphQLRequest.variables.<get-variables>|<get-variables>(){}[0]
}
final class com.apollographql.execution/GraphQLResponse { // com.apollographql.execution/GraphQLResponse|null[0]
    final class Builder { // com.apollographql.execution/GraphQLResponse.Builder|null[0]
        constructor <init>() // com.apollographql.execution/GraphQLResponse.Builder.<init>|<init>(){}[0]
        final fun build(): com.apollographql.execution/GraphQLResponse // com.apollographql.execution/GraphQLResponse.Builder.build|build(){}[0]
        final fun data(kotlin.collections/Map<kotlin/String, kotlin/Any?>?): com.apollographql.execution/GraphQLResponse.Builder // com.apollographql.execution/GraphQLResponse.Builder.data|data(kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
        final fun errors(kotlin.collections/List<com.apollographql.apollo.api/Error>?): com.apollographql.execution/GraphQLResponse.Builder // com.apollographql.execution/GraphQLResponse.Builder.errors|errors(kotlin.collections.List<com.apollographql.apollo.api.Error>?){}[0]
        final fun extensions(kotlin.collections/Map<kotlin/String, kotlin/Any?>?): com.apollographql.execution/GraphQLResponse.Builder // com.apollographql.execution/GraphQLResponse.Builder.extensions|extensions(kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
        final var data // com.apollographql.execution/GraphQLResponse.Builder.data|{}data[0]
            final fun <get-data>(): kotlin.collections/Map<kotlin/String, kotlin/Any?>? // com.apollographql.execution/GraphQLResponse.Builder.data.<get-data>|<get-data>(){}[0]
            final fun <set-data>(kotlin.collections/Map<kotlin/String, kotlin/Any?>?) // com.apollographql.execution/GraphQLResponse.Builder.data.<set-data>|<set-data>(kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
        final var errors // com.apollographql.execution/GraphQLResponse.Builder.errors|{}errors[0]
            final fun <get-errors>(): kotlin.collections/List<com.apollographql.apollo.api/Error>? // com.apollographql.execution/GraphQLResponse.Builder.errors.<get-errors>|<get-errors>(){}[0]
            final fun <set-errors>(kotlin.collections/List<com.apollographql.apollo.api/Error>?) // com.apollographql.execution/GraphQLResponse.Builder.errors.<set-errors>|<set-errors>(kotlin.collections.List<com.apollographql.apollo.api.Error>?){}[0]
        final var extensions // com.apollographql.execution/GraphQLResponse.Builder.extensions|{}extensions[0]
            final fun <get-extensions>(): kotlin.collections/Map<kotlin/String, kotlin/Any?>? // com.apollographql.execution/GraphQLResponse.Builder.extensions.<get-extensions>|<get-extensions>(){}[0]
            final fun <set-extensions>(kotlin.collections/Map<kotlin/String, kotlin/Any?>?) // com.apollographql.execution/GraphQLResponse.Builder.extensions.<set-extensions>|<set-extensions>(kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
    }
    final fun serialize(com.apollographql.apollo.api.json/JsonWriter) // com.apollographql.execution/GraphQLResponse.serialize|serialize(com.apollographql.apollo.api.json.JsonWriter){}[0]
    final fun serialize(okio/Sink) // com.apollographql.execution/GraphQLResponse.serialize|serialize(okio.Sink){}[0]
    final val data // com.apollographql.execution/GraphQLResponse.data|{}data[0]
        final fun <get-data>(): kotlin/Any? // com.apollographql.execution/GraphQLResponse.data.<get-data>|<get-data>(){}[0]
    final val errors // com.apollographql.execution/GraphQLResponse.errors|{}errors[0]
        final fun <get-errors>(): kotlin.collections/List<com.apollographql.apollo.api/Error>? // com.apollographql.execution/GraphQLResponse.errors.<get-errors>|<get-errors>(){}[0]
    final val extensions // com.apollographql.execution/GraphQLResponse.extensions|{}extensions[0]
        final fun <get-extensions>(): kotlin.collections/Map<kotlin/String, kotlin/Any?>? // com.apollographql.execution/GraphQLResponse.extensions.<get-extensions>|<get-extensions>(){}[0]
}
final class com.apollographql.execution/InMemoryPersistedDocumentCache : com.apollographql.execution/PersistedDocumentCache { // com.apollographql.execution/InMemoryPersistedDocumentCache|null[0]
    constructor <init>() // com.apollographql.execution/InMemoryPersistedDocumentCache.<init>|<init>(){}[0]
    final fun get(kotlin/String): com.apollographql.execution/PersistedDocument? // com.apollographql.execution/InMemoryPersistedDocumentCache.get|get(kotlin.String){}[0]
    final fun put(kotlin/String, com.apollographql.execution/PersistedDocument) // com.apollographql.execution/InMemoryPersistedDocumentCache.put|put(kotlin.String;com.apollographql.execution.PersistedDocument){}[0]
}
final class com.apollographql.execution/ResolveInfo { // com.apollographql.execution/ResolveInfo|null[0]
    final fun <#A1: kotlin/Any?> getArgument(kotlin/String): com.apollographql.apollo.api/Optional<#A1> // com.apollographql.execution/ResolveInfo.getArgument|getArgument(kotlin.String){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> getRequiredArgument(kotlin/String): #A1 // com.apollographql.execution/ResolveInfo.getRequiredArgument|getRequiredArgument(kotlin.String){0§<kotlin.Any?>}[0]
    final fun coordinates(): kotlin/String // com.apollographql.execution/ResolveInfo.coordinates|coordinates(){}[0]
    final fun fieldDefinition(): com.apollographql.apollo.ast/GQLFieldDefinition // com.apollographql.execution/ResolveInfo.fieldDefinition|fieldDefinition(){}[0]
    final val executionContext // com.apollographql.execution/ResolveInfo.executionContext|{}executionContext[0]
        final fun <get-executionContext>(): com.apollographql.apollo.api/ExecutionContext // com.apollographql.execution/ResolveInfo.executionContext.<get-executionContext>|<get-executionContext>(){}[0]
    final val field // com.apollographql.execution/ResolveInfo.field|{}field[0]
        final fun <get-field>(): com.apollographql.apollo.ast/GQLField // com.apollographql.execution/ResolveInfo.field.<get-field>|<get-field>(){}[0]
    final val fieldName // com.apollographql.execution/ResolveInfo.fieldName|{}fieldName[0]
        final fun <get-fieldName>(): kotlin/String // com.apollographql.execution/ResolveInfo.fieldName.<get-fieldName>|<get-fieldName>(){}[0]
    final val fields // com.apollographql.execution/ResolveInfo.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/List<com.apollographql.apollo.ast/GQLField> // com.apollographql.execution/ResolveInfo.fields.<get-fields>|<get-fields>(){}[0]
    final val parentObject // com.apollographql.execution/ResolveInfo.parentObject|{}parentObject[0]
        final fun <get-parentObject>(): kotlin/Any? // com.apollographql.execution/ResolveInfo.parentObject.<get-parentObject>|<get-parentObject>(){}[0]
    final val parentType // com.apollographql.execution/ResolveInfo.parentType|{}parentType[0]
        final fun <get-parentType>(): kotlin/String // com.apollographql.execution/ResolveInfo.parentType.<get-parentType>|<get-parentType>(){}[0]
    final val schema // com.apollographql.execution/ResolveInfo.schema|{}schema[0]
        final fun <get-schema>(): com.apollographql.apollo.ast/Schema // com.apollographql.execution/ResolveInfo.schema.<get-schema>|<get-schema>(){}[0]
}
final class com.apollographql.execution/ResolveTypeInfo { // com.apollographql.execution/ResolveTypeInfo|null[0]
    constructor <init>(kotlin/String, com.apollographql.apollo.ast/Schema) // com.apollographql.execution/ResolveTypeInfo.<init>|<init>(kotlin.String;com.apollographql.apollo.ast.Schema){}[0]
    final val schema // com.apollographql.execution/ResolveTypeInfo.schema|{}schema[0]
        final fun <get-schema>(): com.apollographql.apollo.ast/Schema // com.apollographql.execution/ResolveTypeInfo.schema.<get-schema>|<get-schema>(){}[0]
    final val type // com.apollographql.execution/ResolveTypeInfo.type|{}type[0]
        final fun <get-type>(): kotlin/String // com.apollographql.execution/ResolveTypeInfo.type.<get-type>|<get-type>(){}[0]
}
final class com.apollographql.execution/SubscriptionError : com.apollographql.execution/SubscriptionEvent { // com.apollographql.execution/SubscriptionError|null[0]
    constructor <init>(kotlin.collections/List<com.apollographql.apollo.api/Error>) // com.apollographql.execution/SubscriptionError.<init>|<init>(kotlin.collections.List<com.apollographql.apollo.api.Error>){}[0]
    final val errors // com.apollographql.execution/SubscriptionError.errors|{}errors[0]
        final fun <get-errors>(): kotlin.collections/List<com.apollographql.apollo.api/Error> // com.apollographql.execution/SubscriptionError.errors.<get-errors>|<get-errors>(){}[0]
}
final class com.apollographql.execution/SubscriptionResponse : com.apollographql.execution/SubscriptionEvent { // com.apollographql.execution/SubscriptionResponse|null[0]
    constructor <init>(com.apollographql.execution/GraphQLResponse) // com.apollographql.execution/SubscriptionResponse.<init>|<init>(com.apollographql.execution.GraphQLResponse){}[0]
    final val response // com.apollographql.execution/SubscriptionResponse.response|{}response[0]
        final fun <get-response>(): com.apollographql.execution/GraphQLResponse // com.apollographql.execution/SubscriptionResponse.response.<get-response>|<get-response>(){}[0]
}
final class com.apollographql.execution/ValidPersistedDocument : com.apollographql.execution/PersistedDocument { // com.apollographql.execution/ValidPersistedDocument|null[0]
    constructor <init>(com.apollographql.apollo.ast/GQLDocument) // com.apollographql.execution/ValidPersistedDocument.<init>|<init>(com.apollographql.apollo.ast.GQLDocument){}[0]
    final val document // com.apollographql.execution/ValidPersistedDocument.document|{}document[0]
        final fun <get-document>(): com.apollographql.apollo.ast/GQLDocument // com.apollographql.execution/ValidPersistedDocument.document.<get-document>|<get-document>(){}[0]
}
final fun (com.apollographql.apollo.api/ExecutionContext).com.apollographql.execution.websocket/subscriptionId(): kotlin/String // com.apollographql.execution.websocket/subscriptionId|subscriptionId@com.apollographql.apollo.api.ExecutionContext(){}[0]
final fun (com.apollographql.execution/ExecutableSchema.Builder).com.apollographql.execution/compositeResolver(kotlin/Function1<com.apollographql.execution/CompositeResolverBuilder, kotlin/Unit>): com.apollographql.execution/ExecutableSchema.Builder // com.apollographql.execution/compositeResolver|compositeResolver@com.apollographql.execution.ExecutableSchema.Builder(kotlin.Function1<com.apollographql.execution.CompositeResolverBuilder,kotlin.Unit>){}[0]
final fun (kotlin.collections/Map<kotlin/String, kotlin.collections/List<kotlin/String>>).com.apollographql.execution/toExternalValueMap(): kotlin/Result<kotlin.collections/Map<kotlin/String, kotlin/Any?>> // com.apollographql.execution/toExternalValueMap|toExternalValueMap@kotlin.collections.Map<kotlin.String,kotlin.collections.List<kotlin.String>>(){}[0]
final fun (kotlin.collections/Map<kotlin/String, kotlin/Any?>).com.apollographql.execution/parseAsGraphQLRequest(): kotlin/Result<com.apollographql.execution/GraphQLRequest> // com.apollographql.execution/parseAsGraphQLRequest|parseAsGraphQLRequest@kotlin.collections.Map<kotlin.String,kotlin.Any?>(){}[0]
final fun (kotlin/String).com.apollographql.execution/parseAsGraphQLRequest(): kotlin/Result<com.apollographql.execution/GraphQLRequest> // com.apollographql.execution/parseAsGraphQLRequest|parseAsGraphQLRequest@kotlin.String(){}[0]
final fun (kotlin/String).com.apollographql.execution/toGraphQLRequest(): com.apollographql.execution/GraphQLRequest // com.apollographql.execution/toGraphQLRequest|toGraphQLRequest@kotlin.String(){}[0]
final fun (okio/BufferedSource).com.apollographql.execution/parseAsGraphQLRequest(): kotlin/Result<com.apollographql.execution/GraphQLRequest> // com.apollographql.execution/parseAsGraphQLRequest|parseAsGraphQLRequest@okio.BufferedSource(){}[0]
final fun com.apollographql.execution/sandboxHtml(kotlin/String, kotlin/String): kotlin/String // com.apollographql.execution/sandboxHtml|sandboxHtml(kotlin.String;kotlin.String){}[0]
final object com.apollographql.execution.websocket/ConnectionInitAck : com.apollographql.execution.websocket/ConnectionInitResult { // com.apollographql.execution.websocket/ConnectionInitAck|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.websocket/ConnectionInitAck.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.websocket/ConnectionInitAck.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.websocket/ConnectionInitAck.toString|toString(){}[0]
}
final object com.apollographql.execution/BooleanCoercing : com.apollographql.execution/Coercing<kotlin/Boolean> { // com.apollographql.execution/BooleanCoercing|null[0]
    final fun deserialize(kotlin/Any?): kotlin/Boolean // com.apollographql.execution/BooleanCoercing.deserialize|deserialize(kotlin.Any?){}[0]
    final fun parseLiteral(com.apollographql.apollo.ast/GQLValue): kotlin/Boolean // com.apollographql.execution/BooleanCoercing.parseLiteral|parseLiteral(com.apollographql.apollo.ast.GQLValue){}[0]
    final fun serialize(kotlin/Boolean): kotlin/Any? // com.apollographql.execution/BooleanCoercing.serialize|serialize(kotlin.Boolean){}[0]
}
final object com.apollographql.execution/FloatCoercing : com.apollographql.execution/Coercing<kotlin/Double> { // com.apollographql.execution/FloatCoercing|null[0]
    final fun deserialize(kotlin/Any?): kotlin/Double // com.apollographql.execution/FloatCoercing.deserialize|deserialize(kotlin.Any?){}[0]
    final fun parseLiteral(com.apollographql.apollo.ast/GQLValue): kotlin/Double // com.apollographql.execution/FloatCoercing.parseLiteral|parseLiteral(com.apollographql.apollo.ast.GQLValue){}[0]
    final fun serialize(kotlin/Double): kotlin/Any? // com.apollographql.execution/FloatCoercing.serialize|serialize(kotlin.Double){}[0]
}
final object com.apollographql.execution/IntCoercing : com.apollographql.execution/Coercing<kotlin/Int> { // com.apollographql.execution/IntCoercing|null[0]
    final fun deserialize(kotlin/Any?): kotlin/Int // com.apollographql.execution/IntCoercing.deserialize|deserialize(kotlin.Any?){}[0]
    final fun parseLiteral(com.apollographql.apollo.ast/GQLValue): kotlin/Int // com.apollographql.execution/IntCoercing.parseLiteral|parseLiteral(com.apollographql.apollo.ast.GQLValue){}[0]
    final fun serialize(kotlin/Int): kotlin/Any? // com.apollographql.execution/IntCoercing.serialize|serialize(kotlin.Int){}[0]
}
final object com.apollographql.execution/StringCoercing : com.apollographql.execution/Coercing<kotlin/String> { // com.apollographql.execution/StringCoercing|null[0]
    final fun deserialize(kotlin/Any?): kotlin/String // com.apollographql.execution/StringCoercing.deserialize|deserialize(kotlin.Any?){}[0]
    final fun parseLiteral(com.apollographql.apollo.ast/GQLValue): kotlin/String // com.apollographql.execution/StringCoercing.parseLiteral|parseLiteral(com.apollographql.apollo.ast.GQLValue){}[0]
    final fun serialize(kotlin/String): kotlin/Any? // com.apollographql.execution/StringCoercing.serialize|serialize(kotlin.String){}[0]
}
open annotation class com.apollographql.execution.annotation/GraphQLDefault : kotlin/Annotation { // com.apollographql.execution.annotation/GraphQLDefault|null[0]
    constructor <init>(kotlin/String) // com.apollographql.execution.annotation/GraphQLDefault.<init>|<init>(kotlin.String){}[0]
    final val value // com.apollographql.execution.annotation/GraphQLDefault.value|{}value[0]
        final fun <get-value>(): kotlin/String // com.apollographql.execution.annotation/GraphQLDefault.value.<get-value>|<get-value>(){}[0]
}
open annotation class com.apollographql.execution.annotation/GraphQLDirective : kotlin/Annotation { // com.apollographql.execution.annotation/GraphQLDirective|null[0]
    constructor <init>() // com.apollographql.execution.annotation/GraphQLDirective.<init>|<init>(){}[0]
}
open annotation class com.apollographql.execution.annotation/GraphQLMutation : kotlin/Annotation { // com.apollographql.execution.annotation/GraphQLMutation|null[0]
    constructor <init>() // com.apollographql.execution.annotation/GraphQLMutation.<init>|<init>(){}[0]
}
open annotation class com.apollographql.execution.annotation/GraphQLName : kotlin/Annotation { // com.apollographql.execution.annotation/GraphQLName|null[0]
    constructor <init>(kotlin/String) // com.apollographql.execution.annotation/GraphQLName.<init>|<init>(kotlin.String){}[0]
    final val name // com.apollographql.execution.annotation/GraphQLName.name|{}name[0]
        final fun <get-name>(): kotlin/String // com.apollographql.execution.annotation/GraphQLName.name.<get-name>|<get-name>(){}[0]
}
open annotation class com.apollographql.execution.annotation/GraphQLQuery : kotlin/Annotation { // com.apollographql.execution.annotation/GraphQLQuery|null[0]
    constructor <init>() // com.apollographql.execution.annotation/GraphQLQuery.<init>|<init>(){}[0]
}
open annotation class com.apollographql.execution.annotation/GraphQLScalar : kotlin/Annotation { // com.apollographql.execution.annotation/GraphQLScalar|null[0]
    constructor <init>(kotlin.reflect/KClass<*>) // com.apollographql.execution.annotation/GraphQLScalar.<init>|<init>(kotlin.reflect.KClass<*>){}[0]
    final val coercing // com.apollographql.execution.annotation/GraphQLScalar.coercing|{}coercing[0]
        final fun <get-coercing>(): kotlin.reflect/KClass<*> // com.apollographql.execution.annotation/GraphQLScalar.coercing.<get-coercing>|<get-coercing>(){}[0]
}
open annotation class com.apollographql.execution.annotation/GraphQLSubscription : kotlin/Annotation { // com.apollographql.execution.annotation/GraphQLSubscription|null[0]
    constructor <init>() // com.apollographql.execution.annotation/GraphQLSubscription.<init>|<init>(){}[0]
}
open annotation class com.apollographql.execution/CompositeResolverMarker : kotlin/Annotation { // com.apollographql.execution/CompositeResolverMarker|null[0]
    constructor <init>() // com.apollographql.execution/CompositeResolverMarker.<init>|<init>(){}[0]
}
sealed interface com.apollographql.execution.websocket/ConnectionInitResult // com.apollographql.execution.websocket/ConnectionInitResult|null[0]
sealed interface com.apollographql.execution.websocket/WebSocketMessage // com.apollographql.execution.websocket/WebSocketMessage|null[0]
sealed interface com.apollographql.execution/PersistedDocument // com.apollographql.execution/PersistedDocument|null[0]
sealed interface com.apollographql.execution/SubscriptionEvent // com.apollographql.execution/SubscriptionEvent|null[0]
