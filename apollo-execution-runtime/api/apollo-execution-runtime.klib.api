// Klib ABI Dump
// Targets: [macosArm64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.apollographql.execution:apollo-execution-runtime>
open annotation class com.apollographql.execution.annotation/GraphQLDefault : kotlin/Annotation { // com.apollographql.execution.annotation/GraphQLDefault|null[0]
    constructor <init>(kotlin/String) // com.apollographql.execution.annotation/GraphQLDefault.<init>|<init>(kotlin.String){}[0]

    final val value // com.apollographql.execution.annotation/GraphQLDefault.value|{}value[0]
        final fun <get-value>(): kotlin/String // com.apollographql.execution.annotation/GraphQLDefault.value.<get-value>|<get-value>(){}[0]
}

open annotation class com.apollographql.execution.annotation/GraphQLDirective : kotlin/Annotation { // com.apollographql.execution.annotation/GraphQLDirective|null[0]
    constructor <init>() // com.apollographql.execution.annotation/GraphQLDirective.<init>|<init>(){}[0]
}

open annotation class com.apollographql.execution.annotation/GraphQLMutation : kotlin/Annotation { // com.apollographql.execution.annotation/GraphQLMutation|null[0]
    constructor <init>() // com.apollographql.execution.annotation/GraphQLMutation.<init>|<init>(){}[0]
}

open annotation class com.apollographql.execution.annotation/GraphQLName : kotlin/Annotation { // com.apollographql.execution.annotation/GraphQLName|null[0]
    constructor <init>(kotlin/String) // com.apollographql.execution.annotation/GraphQLName.<init>|<init>(kotlin.String){}[0]

    final val name // com.apollographql.execution.annotation/GraphQLName.name|{}name[0]
        final fun <get-name>(): kotlin/String // com.apollographql.execution.annotation/GraphQLName.name.<get-name>|<get-name>(){}[0]
}

open annotation class com.apollographql.execution.annotation/GraphQLQuery : kotlin/Annotation { // com.apollographql.execution.annotation/GraphQLQuery|null[0]
    constructor <init>() // com.apollographql.execution.annotation/GraphQLQuery.<init>|<init>(){}[0]
}

open annotation class com.apollographql.execution.annotation/GraphQLScalar : kotlin/Annotation { // com.apollographql.execution.annotation/GraphQLScalar|null[0]
    constructor <init>(kotlin.reflect/KClass<*>) // com.apollographql.execution.annotation/GraphQLScalar.<init>|<init>(kotlin.reflect.KClass<*>){}[0]

    final val coercing // com.apollographql.execution.annotation/GraphQLScalar.coercing|{}coercing[0]
        final fun <get-coercing>(): kotlin.reflect/KClass<*> // com.apollographql.execution.annotation/GraphQLScalar.coercing.<get-coercing>|<get-coercing>(){}[0]
}

open annotation class com.apollographql.execution.annotation/GraphQLSubscription : kotlin/Annotation { // com.apollographql.execution.annotation/GraphQLSubscription|null[0]
    constructor <init>() // com.apollographql.execution.annotation/GraphQLSubscription.<init>|<init>(){}[0]
}

open annotation class com.apollographql.execution/CompositeResolverMarker : kotlin/Annotation { // com.apollographql.execution/CompositeResolverMarker|null[0]
    constructor <init>() // com.apollographql.execution/CompositeResolverMarker.<init>|<init>(){}[0]
}

abstract interface com.apollographql.execution.websocket/WebSocketHandler { // com.apollographql.execution.websocket/WebSocketHandler|null[0]
    abstract fun handleMessage(com.apollographql.execution.websocket/WebSocketMessage) // com.apollographql.execution.websocket/WebSocketHandler.handleMessage|handleMessage(com.apollographql.execution.websocket.WebSocketMessage){}[0]
}

sealed interface com.apollographql.execution.websocket/ConnectionInitResult // com.apollographql.execution.websocket/ConnectionInitResult|null[0]

sealed interface com.apollographql.execution.websocket/WebSocketMessage // com.apollographql.execution.websocket/WebSocketMessage|null[0]

sealed interface com.apollographql.execution.websocket/WsConnectionInitResult // com.apollographql.execution.websocket/WsConnectionInitResult|null[0]

final class com.apollographql.execution.websocket/ConnectionInitError : com.apollographql.execution.websocket/ConnectionInitResult { // com.apollographql.execution.websocket/ConnectionInitError|null[0]
    constructor <init>(com.apollographql.apollo.api/Optional<kotlin/Any?> = ...) // com.apollographql.execution.websocket/ConnectionInitError.<init>|<init>(com.apollographql.apollo.api.Optional<kotlin.Any?>){}[0]

    final val payload // com.apollographql.execution.websocket/ConnectionInitError.payload|{}payload[0]
        final fun <get-payload>(): com.apollographql.apollo.api/Optional<kotlin/Any?> // com.apollographql.execution.websocket/ConnectionInitError.payload.<get-payload>|<get-payload>(){}[0]
}

final class com.apollographql.execution.websocket/GraphQLWsWebSocketHandler : com.apollographql.execution.websocket/WebSocketHandler { // com.apollographql.execution.websocket/GraphQLWsWebSocketHandler|null[0]
    constructor <init>(com.apollographql.apollo.execution/ExecutableSchema, kotlinx.coroutines/CoroutineScope, com.apollographql.apollo.api/ExecutionContext, kotlin.coroutines/SuspendFunction1<com.apollographql.execution.websocket/WebSocketMessage, kotlin/Unit>, kotlin.coroutines/SuspendFunction1<kotlin/Any?, com.apollographql.execution.websocket/WsConnectionInitResult> = ...) // com.apollographql.execution.websocket/GraphQLWsWebSocketHandler.<init>|<init>(com.apollographql.apollo.execution.ExecutableSchema;kotlinx.coroutines.CoroutineScope;com.apollographql.apollo.api.ExecutionContext;kotlin.coroutines.SuspendFunction1<com.apollographql.execution.websocket.WebSocketMessage,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<kotlin.Any?,com.apollographql.execution.websocket.WsConnectionInitResult>){}[0]

    final fun close() // com.apollographql.execution.websocket/GraphQLWsWebSocketHandler.close|close(){}[0]
    final fun handleMessage(com.apollographql.execution.websocket/WebSocketMessage) // com.apollographql.execution.websocket/GraphQLWsWebSocketHandler.handleMessage|handleMessage(com.apollographql.execution.websocket.WebSocketMessage){}[0]
}

final class com.apollographql.execution.websocket/SubscriptionWebSocketHandler : com.apollographql.execution.websocket/WebSocketHandler { // com.apollographql.execution.websocket/SubscriptionWebSocketHandler|null[0]
    constructor <init>(com.apollographql.apollo.execution/ExecutableSchema, kotlinx.coroutines/CoroutineScope, com.apollographql.apollo.api/ExecutionContext, kotlin.coroutines/SuspendFunction1<com.apollographql.execution.websocket/WebSocketMessage, kotlin/Unit>, kotlin.coroutines/SuspendFunction1<kotlin/Any?, com.apollographql.execution.websocket/ConnectionInitResult> = ...) // com.apollographql.execution.websocket/SubscriptionWebSocketHandler.<init>|<init>(com.apollographql.apollo.execution.ExecutableSchema;kotlinx.coroutines.CoroutineScope;com.apollographql.apollo.api.ExecutionContext;kotlin.coroutines.SuspendFunction1<com.apollographql.execution.websocket.WebSocketMessage,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<kotlin.Any?,com.apollographql.execution.websocket.ConnectionInitResult>){}[0]

    final fun close() // com.apollographql.execution.websocket/SubscriptionWebSocketHandler.close|close(){}[0]
    final fun handleMessage(com.apollographql.execution.websocket/WebSocketMessage) // com.apollographql.execution.websocket/SubscriptionWebSocketHandler.handleMessage|handleMessage(com.apollographql.execution.websocket.WebSocketMessage){}[0]
}

final class com.apollographql.execution.websocket/WebSocketBinaryMessage : com.apollographql.execution.websocket/WebSocketMessage { // com.apollographql.execution.websocket/WebSocketBinaryMessage|null[0]
    constructor <init>(kotlin/ByteArray) // com.apollographql.execution.websocket/WebSocketBinaryMessage.<init>|<init>(kotlin.ByteArray){}[0]

    final val data // com.apollographql.execution.websocket/WebSocketBinaryMessage.data|{}data[0]
        final fun <get-data>(): kotlin/ByteArray // com.apollographql.execution.websocket/WebSocketBinaryMessage.data.<get-data>|<get-data>(){}[0]
}

final class com.apollographql.execution.websocket/WebSocketTextMessage : com.apollographql.execution.websocket/WebSocketMessage { // com.apollographql.execution.websocket/WebSocketTextMessage|null[0]
    constructor <init>(kotlin/String) // com.apollographql.execution.websocket/WebSocketTextMessage.<init>|<init>(kotlin.String){}[0]

    final val data // com.apollographql.execution.websocket/WebSocketTextMessage.data|{}data[0]
        final fun <get-data>(): kotlin/String // com.apollographql.execution.websocket/WebSocketTextMessage.data.<get-data>|<get-data>(){}[0]
}

final class com.apollographql.execution.websocket/WsConnectionInitError : com.apollographql.execution.websocket/WsConnectionInitResult { // com.apollographql.execution.websocket/WsConnectionInitError|null[0]
    constructor <init>(com.apollographql.apollo.api/Optional<kotlin/Any?> = ...) // com.apollographql.execution.websocket/WsConnectionInitError.<init>|<init>(com.apollographql.apollo.api.Optional<kotlin.Any?>){}[0]

    final val payload // com.apollographql.execution.websocket/WsConnectionInitError.payload|{}payload[0]
        final fun <get-payload>(): com.apollographql.apollo.api/Optional<kotlin/Any?> // com.apollographql.execution.websocket/WsConnectionInitError.payload.<get-payload>|<get-payload>(){}[0]
}

final class com.apollographql.execution/CompositeResolverBuilder { // com.apollographql.execution/CompositeResolverBuilder|null[0]
    constructor <init>() // com.apollographql.execution/CompositeResolverBuilder.<init>|<init>(){}[0]

    final fun build(): com.apollographql.apollo.execution/Resolver // com.apollographql.execution/CompositeResolverBuilder.build|build(){}[0]
    final fun default(com.apollographql.apollo.execution/Resolver) // com.apollographql.execution/CompositeResolverBuilder.default|default(com.apollographql.apollo.execution.Resolver){}[0]
    final fun type(kotlin/String, kotlin/Function1<com.apollographql.execution/CompositeResolverBuilder.TypeBuilder, kotlin/Unit>) // com.apollographql.execution/CompositeResolverBuilder.type|type(kotlin.String;kotlin.Function1<com.apollographql.execution.CompositeResolverBuilder.TypeBuilder,kotlin.Unit>){}[0]

    final class TypeBuilder { // com.apollographql.execution/CompositeResolverBuilder.TypeBuilder|null[0]
        constructor <init>() // com.apollographql.execution/CompositeResolverBuilder.TypeBuilder.<init>|<init>(){}[0]

        final fun field(kotlin/String, com.apollographql.apollo.execution/Resolver) // com.apollographql.execution/CompositeResolverBuilder.TypeBuilder.field|field(kotlin.String;com.apollographql.apollo.execution.Resolver){}[0]
    }
}

final object com.apollographql.execution.websocket/ConnectionInitAck : com.apollographql.execution.websocket/ConnectionInitResult { // com.apollographql.execution.websocket/ConnectionInitAck|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.websocket/ConnectionInitAck.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.websocket/ConnectionInitAck.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.websocket/ConnectionInitAck.toString|toString(){}[0]
}

final object com.apollographql.execution.websocket/WsConnectionInitAck : com.apollographql.execution.websocket/WsConnectionInitResult { // com.apollographql.execution.websocket/WsConnectionInitAck|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.websocket/WsConnectionInitAck.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.websocket/WsConnectionInitAck.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.websocket/WsConnectionInitAck.toString|toString(){}[0]
}

final fun (com.apollographql.apollo.execution/ExecutableSchema.Builder).com.apollographql.execution/compositeResolver(kotlin/Function1<com.apollographql.execution/CompositeResolverBuilder, kotlin/Unit>): com.apollographql.apollo.execution/ExecutableSchema.Builder // com.apollographql.execution/compositeResolver|compositeResolver@com.apollographql.apollo.execution.ExecutableSchema.Builder(kotlin.Function1<com.apollographql.execution.CompositeResolverBuilder,kotlin.Unit>){}[0]
final fun com.apollographql.execution/sandboxHtml(kotlin/String, kotlin/String): kotlin/String // com.apollographql.execution/sandboxHtml|sandboxHtml(kotlin.String;kotlin.String){}[0]
