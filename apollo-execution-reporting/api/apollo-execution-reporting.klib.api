// Klib ABI Dump
// Targets: [macosArm64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.apollographql.execution:apollo-execution-reporting>
final class com.apollographql.execution.reporting/ApolloOperationTracing { // com.apollographql.execution.reporting/ApolloOperationTracing|null[0]
    constructor <init>() // com.apollographql.execution.reporting/ApolloOperationTracing.<init>|<init>(){}[0]
    final fun beforeField(com.apollographql.execution/ResolveInfo): com.apollographql.execution/FieldCallback? // com.apollographql.execution.reporting/ApolloOperationTracing.beforeField|beforeField(com.apollographql.execution.ResolveInfo){}[0]
    final fun toProtoTrace(): com.apollographql.execution.reporting/Trace // com.apollographql.execution.reporting/ApolloOperationTracing.toProtoTrace|toProtoTrace(){}[0]
}
final class com.apollographql.execution.reporting/ApolloReportingInstrumentation : com.apollographql.execution/Instrumentation { // com.apollographql.execution.reporting/ApolloReportingInstrumentation|null[0]
    constructor <init>(kotlin/String? = ...) // com.apollographql.execution.reporting/ApolloReportingInstrumentation.<init>|<init>(kotlin.String?){}[0]
    final fun onField(com.apollographql.execution/ResolveInfo): com.apollographql.execution/FieldCallback? // com.apollographql.execution.reporting/ApolloReportingInstrumentation.onField|onField(com.apollographql.execution.ResolveInfo){}[0]
    final fun onOperation(com.apollographql.execution/OperationInfo): com.apollographql.execution/OperationCallback? // com.apollographql.execution.reporting/ApolloReportingInstrumentation.onOperation|onOperation(com.apollographql.execution.OperationInfo){}[0]
    final val apolloKey // com.apollographql.execution.reporting/ApolloReportingInstrumentation.apolloKey|{}apolloKey[0]
        final fun <get-apolloKey>(): kotlin/String? // com.apollographql.execution.reporting/ApolloReportingInstrumentation.apolloKey.<get-apolloKey>|<get-apolloKey>(){}[0]
    final val client // com.apollographql.execution.reporting/ApolloReportingInstrumentation.client|{}client[0]
        final fun <get-client>(): io.ktor.client/HttpClient // com.apollographql.execution.reporting/ApolloReportingInstrumentation.client.<get-client>|<get-client>(){}[0]
}
final class com.apollographql.execution.reporting/ApolloReportingOperationContext : com.apollographql.apollo.api/ExecutionContext.Element { // com.apollographql.execution.reporting/ApolloReportingOperationContext|null[0]
    constructor <init>() // com.apollographql.execution.reporting/ApolloReportingOperationContext.<init>|<init>(){}[0]
    final object Key : com.apollographql.apollo.api/ExecutionContext.Key<com.apollographql.execution.reporting/ApolloReportingOperationContext> // com.apollographql.execution.reporting/ApolloReportingOperationContext.Key|null[0]
    final val apolloOperationTracing // com.apollographql.execution.reporting/ApolloReportingOperationContext.apolloOperationTracing|{}apolloOperationTracing[0]
        final fun <get-apolloOperationTracing>(): com.apollographql.execution.reporting/ApolloOperationTracing // com.apollographql.execution.reporting/ApolloReportingOperationContext.apolloOperationTracing.<get-apolloOperationTracing>|<get-apolloOperationTracing>(){}[0]
    final val key // com.apollographql.execution.reporting/ApolloReportingOperationContext.key|{}key[0]
        final fun <get-key>(): com.apollographql.execution.reporting/ApolloReportingOperationContext.Key // com.apollographql.execution.reporting/ApolloReportingOperationContext.key.<get-key>|<get-key>(){}[0]
}
final class com.apollographql.execution.reporting/ContextualizedQueryLatencyStats : com.squareup.wire/Message<com.apollographql.execution.reporting/ContextualizedQueryLatencyStats, kotlin/Nothing> { // com.apollographql.execution.reporting/ContextualizedQueryLatencyStats|null[0]
    constructor <init>(com.apollographql.execution.reporting/QueryLatencyStats? = ..., com.apollographql.execution.reporting/StatsContext? = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/ContextualizedQueryLatencyStats.<init>|<init>(com.apollographql.execution.reporting.QueryLatencyStats?;com.apollographql.execution.reporting.StatsContext?;okio.ByteString){}[0]
    final fun copy(com.apollographql.execution.reporting/QueryLatencyStats? = ..., com.apollographql.execution.reporting/StatsContext? = ..., okio/ByteString = ...): com.apollographql.execution.reporting/ContextualizedQueryLatencyStats // com.apollographql.execution.reporting/ContextualizedQueryLatencyStats.copy|copy(com.apollographql.execution.reporting.QueryLatencyStats?;com.apollographql.execution.reporting.StatsContext?;okio.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/ContextualizedQueryLatencyStats.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/ContextualizedQueryLatencyStats.hashCode|hashCode(){}[0]
    final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/ContextualizedQueryLatencyStats.newBuilder|newBuilder(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.reporting/ContextualizedQueryLatencyStats.toString|toString(){}[0]
    final object Companion { // com.apollographql.execution.reporting/ContextualizedQueryLatencyStats.Companion|null[0]
        final val ADAPTER // com.apollographql.execution.reporting/ContextualizedQueryLatencyStats.Companion.ADAPTER|{}ADAPTER[0]
            final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/ContextualizedQueryLatencyStats> // com.apollographql.execution.reporting/ContextualizedQueryLatencyStats.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
    }
    final val context // com.apollographql.execution.reporting/ContextualizedQueryLatencyStats.context|{}context[0]
        final fun <get-context>(): com.apollographql.execution.reporting/StatsContext? // com.apollographql.execution.reporting/ContextualizedQueryLatencyStats.context.<get-context>|<get-context>(){}[0]
    final val query_latency_stats // com.apollographql.execution.reporting/ContextualizedQueryLatencyStats.query_latency_stats|{}query_latency_stats[0]
        final fun <get-query_latency_stats>(): com.apollographql.execution.reporting/QueryLatencyStats? // com.apollographql.execution.reporting/ContextualizedQueryLatencyStats.query_latency_stats.<get-query_latency_stats>|<get-query_latency_stats>(){}[0]
}
final class com.apollographql.execution.reporting/ContextualizedStats : com.squareup.wire/Message<com.apollographql.execution.reporting/ContextualizedStats, kotlin/Nothing> { // com.apollographql.execution.reporting/ContextualizedStats|null[0]
    constructor <init>(com.apollographql.execution.reporting/StatsContext? = ..., com.apollographql.execution.reporting/QueryLatencyStats? = ..., kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/TypeStat> = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/ContextualizedStats.<init>|<init>(com.apollographql.execution.reporting.StatsContext?;com.apollographql.execution.reporting.QueryLatencyStats?;kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.TypeStat>;okio.ByteString){}[0]
    final fun copy(com.apollographql.execution.reporting/StatsContext? = ..., com.apollographql.execution.reporting/QueryLatencyStats? = ..., kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/TypeStat> = ..., okio/ByteString = ...): com.apollographql.execution.reporting/ContextualizedStats // com.apollographql.execution.reporting/ContextualizedStats.copy|copy(com.apollographql.execution.reporting.StatsContext?;com.apollographql.execution.reporting.QueryLatencyStats?;kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.TypeStat>;okio.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/ContextualizedStats.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/ContextualizedStats.hashCode|hashCode(){}[0]
    final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/ContextualizedStats.newBuilder|newBuilder(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.reporting/ContextualizedStats.toString|toString(){}[0]
    final object Companion { // com.apollographql.execution.reporting/ContextualizedStats.Companion|null[0]
        final val ADAPTER // com.apollographql.execution.reporting/ContextualizedStats.Companion.ADAPTER|{}ADAPTER[0]
            final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/ContextualizedStats> // com.apollographql.execution.reporting/ContextualizedStats.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
    }
    final val context // com.apollographql.execution.reporting/ContextualizedStats.context|{}context[0]
        final fun <get-context>(): com.apollographql.execution.reporting/StatsContext? // com.apollographql.execution.reporting/ContextualizedStats.context.<get-context>|<get-context>(){}[0]
    final val per_type_stat // com.apollographql.execution.reporting/ContextualizedStats.per_type_stat|{}per_type_stat[0]
        final fun <get-per_type_stat>(): kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/TypeStat> // com.apollographql.execution.reporting/ContextualizedStats.per_type_stat.<get-per_type_stat>|<get-per_type_stat>(){}[0]
    final val query_latency_stats // com.apollographql.execution.reporting/ContextualizedStats.query_latency_stats|{}query_latency_stats[0]
        final fun <get-query_latency_stats>(): com.apollographql.execution.reporting/QueryLatencyStats? // com.apollographql.execution.reporting/ContextualizedStats.query_latency_stats.<get-query_latency_stats>|<get-query_latency_stats>(){}[0]
}
final class com.apollographql.execution.reporting/ContextualizedTypeStats : com.squareup.wire/Message<com.apollographql.execution.reporting/ContextualizedTypeStats, kotlin/Nothing> { // com.apollographql.execution.reporting/ContextualizedTypeStats|null[0]
    constructor <init>(com.apollographql.execution.reporting/StatsContext? = ..., kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/TypeStat> = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/ContextualizedTypeStats.<init>|<init>(com.apollographql.execution.reporting.StatsContext?;kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.TypeStat>;okio.ByteString){}[0]
    final fun copy(com.apollographql.execution.reporting/StatsContext? = ..., kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/TypeStat> = ..., okio/ByteString = ...): com.apollographql.execution.reporting/ContextualizedTypeStats // com.apollographql.execution.reporting/ContextualizedTypeStats.copy|copy(com.apollographql.execution.reporting.StatsContext?;kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.TypeStat>;okio.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/ContextualizedTypeStats.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/ContextualizedTypeStats.hashCode|hashCode(){}[0]
    final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/ContextualizedTypeStats.newBuilder|newBuilder(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.reporting/ContextualizedTypeStats.toString|toString(){}[0]
    final object Companion { // com.apollographql.execution.reporting/ContextualizedTypeStats.Companion|null[0]
        final val ADAPTER // com.apollographql.execution.reporting/ContextualizedTypeStats.Companion.ADAPTER|{}ADAPTER[0]
            final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/ContextualizedTypeStats> // com.apollographql.execution.reporting/ContextualizedTypeStats.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
    }
    final val context // com.apollographql.execution.reporting/ContextualizedTypeStats.context|{}context[0]
        final fun <get-context>(): com.apollographql.execution.reporting/StatsContext? // com.apollographql.execution.reporting/ContextualizedTypeStats.context.<get-context>|<get-context>(){}[0]
    final val per_type_stat // com.apollographql.execution.reporting/ContextualizedTypeStats.per_type_stat|{}per_type_stat[0]
        final fun <get-per_type_stat>(): kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/TypeStat> // com.apollographql.execution.reporting/ContextualizedTypeStats.per_type_stat.<get-per_type_stat>|<get-per_type_stat>(){}[0]
}
final class com.apollographql.execution.reporting/FieldStat : com.squareup.wire/Message<com.apollographql.execution.reporting/FieldStat, kotlin/Nothing> { // com.apollographql.execution.reporting/FieldStat|null[0]
    constructor <init>(kotlin/String = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin.collections/List<kotlin/Long> = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/FieldStat.<init>|<init>(kotlin.String;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.collections.List<kotlin.Long>;okio.ByteString){}[0]
    final fun copy(kotlin/String = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin.collections/List<kotlin/Long> = ..., okio/ByteString = ...): com.apollographql.execution.reporting/FieldStat // com.apollographql.execution.reporting/FieldStat.copy|copy(kotlin.String;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.collections.List<kotlin.Long>;okio.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/FieldStat.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/FieldStat.hashCode|hashCode(){}[0]
    final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/FieldStat.newBuilder|newBuilder(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.reporting/FieldStat.toString|toString(){}[0]
    final object Companion { // com.apollographql.execution.reporting/FieldStat.Companion|null[0]
        final val ADAPTER // com.apollographql.execution.reporting/FieldStat.Companion.ADAPTER|{}ADAPTER[0]
            final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/FieldStat> // com.apollographql.execution.reporting/FieldStat.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
    }
    final val errors_count // com.apollographql.execution.reporting/FieldStat.errors_count|{}errors_count[0]
        final fun <get-errors_count>(): kotlin/Long // com.apollographql.execution.reporting/FieldStat.errors_count.<get-errors_count>|<get-errors_count>(){}[0]
    final val estimated_execution_count // com.apollographql.execution.reporting/FieldStat.estimated_execution_count|{}estimated_execution_count[0]
        final fun <get-estimated_execution_count>(): kotlin/Long // com.apollographql.execution.reporting/FieldStat.estimated_execution_count.<get-estimated_execution_count>|<get-estimated_execution_count>(){}[0]
    final val latency_count // com.apollographql.execution.reporting/FieldStat.latency_count|{}latency_count[0]
        final fun <get-latency_count>(): kotlin.collections/List<kotlin/Long> // com.apollographql.execution.reporting/FieldStat.latency_count.<get-latency_count>|<get-latency_count>(){}[0]
    final val observed_execution_count // com.apollographql.execution.reporting/FieldStat.observed_execution_count|{}observed_execution_count[0]
        final fun <get-observed_execution_count>(): kotlin/Long // com.apollographql.execution.reporting/FieldStat.observed_execution_count.<get-observed_execution_count>|<get-observed_execution_count>(){}[0]
    final val requests_with_errors_count // com.apollographql.execution.reporting/FieldStat.requests_with_errors_count|{}requests_with_errors_count[0]
        final fun <get-requests_with_errors_count>(): kotlin/Long // com.apollographql.execution.reporting/FieldStat.requests_with_errors_count.<get-requests_with_errors_count>|<get-requests_with_errors_count>(){}[0]
    final val return_type // com.apollographql.execution.reporting/FieldStat.return_type|{}return_type[0]
        final fun <get-return_type>(): kotlin/String // com.apollographql.execution.reporting/FieldStat.return_type.<get-return_type>|<get-return_type>(){}[0]
}
final class com.apollographql.execution.reporting/PathErrorStats : com.squareup.wire/Message<com.apollographql.execution.reporting/PathErrorStats, kotlin/Nothing> { // com.apollographql.execution.reporting/PathErrorStats|null[0]
    constructor <init>(kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/PathErrorStats> = ..., kotlin/Long = ..., kotlin/Long = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/PathErrorStats.<init>|<init>(kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.PathErrorStats>;kotlin.Long;kotlin.Long;okio.ByteString){}[0]
    final fun copy(kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/PathErrorStats> = ..., kotlin/Long = ..., kotlin/Long = ..., okio/ByteString = ...): com.apollographql.execution.reporting/PathErrorStats // com.apollographql.execution.reporting/PathErrorStats.copy|copy(kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.PathErrorStats>;kotlin.Long;kotlin.Long;okio.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/PathErrorStats.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/PathErrorStats.hashCode|hashCode(){}[0]
    final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/PathErrorStats.newBuilder|newBuilder(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.reporting/PathErrorStats.toString|toString(){}[0]
    final object Companion { // com.apollographql.execution.reporting/PathErrorStats.Companion|null[0]
        final val ADAPTER // com.apollographql.execution.reporting/PathErrorStats.Companion.ADAPTER|{}ADAPTER[0]
            final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/PathErrorStats> // com.apollographql.execution.reporting/PathErrorStats.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
    }
    final val children // com.apollographql.execution.reporting/PathErrorStats.children|{}children[0]
        final fun <get-children>(): kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/PathErrorStats> // com.apollographql.execution.reporting/PathErrorStats.children.<get-children>|<get-children>(){}[0]
    final val errors_count // com.apollographql.execution.reporting/PathErrorStats.errors_count|{}errors_count[0]
        final fun <get-errors_count>(): kotlin/Long // com.apollographql.execution.reporting/PathErrorStats.errors_count.<get-errors_count>|<get-errors_count>(){}[0]
    final val requests_with_errors_count // com.apollographql.execution.reporting/PathErrorStats.requests_with_errors_count|{}requests_with_errors_count[0]
        final fun <get-requests_with_errors_count>(): kotlin/Long // com.apollographql.execution.reporting/PathErrorStats.requests_with_errors_count.<get-requests_with_errors_count>|<get-requests_with_errors_count>(){}[0]
}
final class com.apollographql.execution.reporting/QueryLatencyStats : com.squareup.wire/Message<com.apollographql.execution.reporting/QueryLatencyStats, kotlin/Nothing> { // com.apollographql.execution.reporting/QueryLatencyStats|null[0]
    constructor <init>(kotlin.collections/List<kotlin/Long> = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin.collections/List<kotlin/Long> = ..., com.apollographql.execution.reporting/PathErrorStats? = ..., kotlin/Long = ..., kotlin.collections/List<kotlin/Long> = ..., kotlin.collections/List<kotlin/Long> = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/QueryLatencyStats.<init>|<init>(kotlin.collections.List<kotlin.Long>;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.collections.List<kotlin.Long>;com.apollographql.execution.reporting.PathErrorStats?;kotlin.Long;kotlin.collections.List<kotlin.Long>;kotlin.collections.List<kotlin.Long>;kotlin.Long;kotlin.Long;kotlin.Long;okio.ByteString){}[0]
    final fun copy(kotlin.collections/List<kotlin/Long> = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin.collections/List<kotlin/Long> = ..., com.apollographql.execution.reporting/PathErrorStats? = ..., kotlin/Long = ..., kotlin.collections/List<kotlin/Long> = ..., kotlin.collections/List<kotlin/Long> = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., okio/ByteString = ...): com.apollographql.execution.reporting/QueryLatencyStats // com.apollographql.execution.reporting/QueryLatencyStats.copy|copy(kotlin.collections.List<kotlin.Long>;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.collections.List<kotlin.Long>;com.apollographql.execution.reporting.PathErrorStats?;kotlin.Long;kotlin.collections.List<kotlin.Long>;kotlin.collections.List<kotlin.Long>;kotlin.Long;kotlin.Long;kotlin.Long;okio.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/QueryLatencyStats.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/QueryLatencyStats.hashCode|hashCode(){}[0]
    final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/QueryLatencyStats.newBuilder|newBuilder(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.reporting/QueryLatencyStats.toString|toString(){}[0]
    final object Companion { // com.apollographql.execution.reporting/QueryLatencyStats.Companion|null[0]
        final val ADAPTER // com.apollographql.execution.reporting/QueryLatencyStats.Companion.ADAPTER|{}ADAPTER[0]
            final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/QueryLatencyStats> // com.apollographql.execution.reporting/QueryLatencyStats.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
    }
    final val cache_hits // com.apollographql.execution.reporting/QueryLatencyStats.cache_hits|{}cache_hits[0]
        final fun <get-cache_hits>(): kotlin/Long // com.apollographql.execution.reporting/QueryLatencyStats.cache_hits.<get-cache_hits>|<get-cache_hits>(){}[0]
    final val cache_latency_count // com.apollographql.execution.reporting/QueryLatencyStats.cache_latency_count|{}cache_latency_count[0]
        final fun <get-cache_latency_count>(): kotlin.collections/List<kotlin/Long> // com.apollographql.execution.reporting/QueryLatencyStats.cache_latency_count.<get-cache_latency_count>|<get-cache_latency_count>(){}[0]
    final val forbidden_operation_count // com.apollographql.execution.reporting/QueryLatencyStats.forbidden_operation_count|{}forbidden_operation_count[0]
        final fun <get-forbidden_operation_count>(): kotlin/Long // com.apollographql.execution.reporting/QueryLatencyStats.forbidden_operation_count.<get-forbidden_operation_count>|<get-forbidden_operation_count>(){}[0]
    final val latency_count // com.apollographql.execution.reporting/QueryLatencyStats.latency_count|{}latency_count[0]
        final fun <get-latency_count>(): kotlin.collections/List<kotlin/Long> // com.apollographql.execution.reporting/QueryLatencyStats.latency_count.<get-latency_count>|<get-latency_count>(){}[0]
    final val persisted_query_hits // com.apollographql.execution.reporting/QueryLatencyStats.persisted_query_hits|{}persisted_query_hits[0]
        final fun <get-persisted_query_hits>(): kotlin/Long // com.apollographql.execution.reporting/QueryLatencyStats.persisted_query_hits.<get-persisted_query_hits>|<get-persisted_query_hits>(){}[0]
    final val persisted_query_misses // com.apollographql.execution.reporting/QueryLatencyStats.persisted_query_misses|{}persisted_query_misses[0]
        final fun <get-persisted_query_misses>(): kotlin/Long // com.apollographql.execution.reporting/QueryLatencyStats.persisted_query_misses.<get-persisted_query_misses>|<get-persisted_query_misses>(){}[0]
    final val private_cache_ttl_count // com.apollographql.execution.reporting/QueryLatencyStats.private_cache_ttl_count|{}private_cache_ttl_count[0]
        final fun <get-private_cache_ttl_count>(): kotlin.collections/List<kotlin/Long> // com.apollographql.execution.reporting/QueryLatencyStats.private_cache_ttl_count.<get-private_cache_ttl_count>|<get-private_cache_ttl_count>(){}[0]
    final val public_cache_ttl_count // com.apollographql.execution.reporting/QueryLatencyStats.public_cache_ttl_count|{}public_cache_ttl_count[0]
        final fun <get-public_cache_ttl_count>(): kotlin.collections/List<kotlin/Long> // com.apollographql.execution.reporting/QueryLatencyStats.public_cache_ttl_count.<get-public_cache_ttl_count>|<get-public_cache_ttl_count>(){}[0]
    final val registered_operation_count // com.apollographql.execution.reporting/QueryLatencyStats.registered_operation_count|{}registered_operation_count[0]
        final fun <get-registered_operation_count>(): kotlin/Long // com.apollographql.execution.reporting/QueryLatencyStats.registered_operation_count.<get-registered_operation_count>|<get-registered_operation_count>(){}[0]
    final val request_count // com.apollographql.execution.reporting/QueryLatencyStats.request_count|{}request_count[0]
        final fun <get-request_count>(): kotlin/Long // com.apollographql.execution.reporting/QueryLatencyStats.request_count.<get-request_count>|<get-request_count>(){}[0]
    final val requests_with_errors_count // com.apollographql.execution.reporting/QueryLatencyStats.requests_with_errors_count|{}requests_with_errors_count[0]
        final fun <get-requests_with_errors_count>(): kotlin/Long // com.apollographql.execution.reporting/QueryLatencyStats.requests_with_errors_count.<get-requests_with_errors_count>|<get-requests_with_errors_count>(){}[0]
    final val requests_without_field_instrumentation // com.apollographql.execution.reporting/QueryLatencyStats.requests_without_field_instrumentation|{}requests_without_field_instrumentation[0]
        final fun <get-requests_without_field_instrumentation>(): kotlin/Long // com.apollographql.execution.reporting/QueryLatencyStats.requests_without_field_instrumentation.<get-requests_without_field_instrumentation>|<get-requests_without_field_instrumentation>(){}[0]
    final val root_error_stats // com.apollographql.execution.reporting/QueryLatencyStats.root_error_stats|{}root_error_stats[0]
        final fun <get-root_error_stats>(): com.apollographql.execution.reporting/PathErrorStats? // com.apollographql.execution.reporting/QueryLatencyStats.root_error_stats.<get-root_error_stats>|<get-root_error_stats>(){}[0]
}
final class com.apollographql.execution.reporting/ReferencedFieldsForType : com.squareup.wire/Message<com.apollographql.execution.reporting/ReferencedFieldsForType, kotlin/Nothing> { // com.apollographql.execution.reporting/ReferencedFieldsForType|null[0]
    constructor <init>(kotlin.collections/List<kotlin/String> = ..., kotlin/Boolean = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/ReferencedFieldsForType.<init>|<init>(kotlin.collections.List<kotlin.String>;kotlin.Boolean;okio.ByteString){}[0]
    final fun copy(kotlin.collections/List<kotlin/String> = ..., kotlin/Boolean = ..., okio/ByteString = ...): com.apollographql.execution.reporting/ReferencedFieldsForType // com.apollographql.execution.reporting/ReferencedFieldsForType.copy|copy(kotlin.collections.List<kotlin.String>;kotlin.Boolean;okio.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/ReferencedFieldsForType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/ReferencedFieldsForType.hashCode|hashCode(){}[0]
    final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/ReferencedFieldsForType.newBuilder|newBuilder(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.reporting/ReferencedFieldsForType.toString|toString(){}[0]
    final object Companion { // com.apollographql.execution.reporting/ReferencedFieldsForType.Companion|null[0]
        final val ADAPTER // com.apollographql.execution.reporting/ReferencedFieldsForType.Companion.ADAPTER|{}ADAPTER[0]
            final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/ReferencedFieldsForType> // com.apollographql.execution.reporting/ReferencedFieldsForType.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
    }
    final val field_names // com.apollographql.execution.reporting/ReferencedFieldsForType.field_names|{}field_names[0]
        final fun <get-field_names>(): kotlin.collections/List<kotlin/String> // com.apollographql.execution.reporting/ReferencedFieldsForType.field_names.<get-field_names>|<get-field_names>(){}[0]
    final val is_interface // com.apollographql.execution.reporting/ReferencedFieldsForType.is_interface|{}is_interface[0]
        final fun <get-is_interface>(): kotlin/Boolean // com.apollographql.execution.reporting/ReferencedFieldsForType.is_interface.<get-is_interface>|<get-is_interface>(){}[0]
}
final class com.apollographql.execution.reporting/Report : com.squareup.wire/Message<com.apollographql.execution.reporting/Report, kotlin/Nothing> { // com.apollographql.execution.reporting/Report|null[0]
    constructor <init>(com.apollographql.execution.reporting/ReportHeader? = ..., kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/TracesAndStats> = ..., com.squareup.wire/Instant? = ..., kotlin/Long = ..., kotlin/Boolean = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Report.<init>|<init>(com.apollographql.execution.reporting.ReportHeader?;kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.TracesAndStats>;com.squareup.wire.Instant?;kotlin.Long;kotlin.Boolean;okio.ByteString){}[0]
    final fun copy(com.apollographql.execution.reporting/ReportHeader? = ..., kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/TracesAndStats> = ..., com.squareup.wire/Instant? = ..., kotlin/Long = ..., kotlin/Boolean = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Report // com.apollographql.execution.reporting/Report.copy|copy(com.apollographql.execution.reporting.ReportHeader?;kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.TracesAndStats>;com.squareup.wire.Instant?;kotlin.Long;kotlin.Boolean;okio.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Report.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Report.hashCode|hashCode(){}[0]
    final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Report.newBuilder|newBuilder(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.reporting/Report.toString|toString(){}[0]
    final object Companion { // com.apollographql.execution.reporting/Report.Companion|null[0]
        final val ADAPTER // com.apollographql.execution.reporting/Report.Companion.ADAPTER|{}ADAPTER[0]
            final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Report> // com.apollographql.execution.reporting/Report.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
    }
    final val end_time // com.apollographql.execution.reporting/Report.end_time|{}end_time[0]
        final fun <get-end_time>(): com.squareup.wire/Instant? // com.apollographql.execution.reporting/Report.end_time.<get-end_time>|<get-end_time>(){}[0]
    final val header_ // com.apollographql.execution.reporting/Report.header_|{}header_[0]
        final fun <get-header_>(): com.apollographql.execution.reporting/ReportHeader? // com.apollographql.execution.reporting/Report.header_.<get-header_>|<get-header_>(){}[0]
    final val operation_count // com.apollographql.execution.reporting/Report.operation_count|{}operation_count[0]
        final fun <get-operation_count>(): kotlin/Long // com.apollographql.execution.reporting/Report.operation_count.<get-operation_count>|<get-operation_count>(){}[0]
    final val traces_per_query // com.apollographql.execution.reporting/Report.traces_per_query|{}traces_per_query[0]
        final fun <get-traces_per_query>(): kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/TracesAndStats> // com.apollographql.execution.reporting/Report.traces_per_query.<get-traces_per_query>|<get-traces_per_query>(){}[0]
    final val traces_pre_aggregated // com.apollographql.execution.reporting/Report.traces_pre_aggregated|{}traces_pre_aggregated[0]
        final fun <get-traces_pre_aggregated>(): kotlin/Boolean // com.apollographql.execution.reporting/Report.traces_pre_aggregated.<get-traces_pre_aggregated>|<get-traces_pre_aggregated>(){}[0]
}
final class com.apollographql.execution.reporting/ReportHeader : com.squareup.wire/Message<com.apollographql.execution.reporting/ReportHeader, kotlin/Nothing> { // com.apollographql.execution.reporting/ReportHeader|null[0]
    constructor <init>(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/ReportHeader.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;okio.ByteString){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., okio/ByteString = ...): com.apollographql.execution.reporting/ReportHeader // com.apollographql.execution.reporting/ReportHeader.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;okio.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/ReportHeader.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/ReportHeader.hashCode|hashCode(){}[0]
    final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/ReportHeader.newBuilder|newBuilder(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.reporting/ReportHeader.toString|toString(){}[0]
    final object Companion { // com.apollographql.execution.reporting/ReportHeader.Companion|null[0]
        final val ADAPTER // com.apollographql.execution.reporting/ReportHeader.Companion.ADAPTER|{}ADAPTER[0]
            final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/ReportHeader> // com.apollographql.execution.reporting/ReportHeader.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
    }
    final val agent_version // com.apollographql.execution.reporting/ReportHeader.agent_version|{}agent_version[0]
        final fun <get-agent_version>(): kotlin/String // com.apollographql.execution.reporting/ReportHeader.agent_version.<get-agent_version>|<get-agent_version>(){}[0]
    final val executable_schema_id // com.apollographql.execution.reporting/ReportHeader.executable_schema_id|{}executable_schema_id[0]
        final fun <get-executable_schema_id>(): kotlin/String // com.apollographql.execution.reporting/ReportHeader.executable_schema_id.<get-executable_schema_id>|<get-executable_schema_id>(){}[0]
    final val graph_ref // com.apollographql.execution.reporting/ReportHeader.graph_ref|{}graph_ref[0]
        final fun <get-graph_ref>(): kotlin/String // com.apollographql.execution.reporting/ReportHeader.graph_ref.<get-graph_ref>|<get-graph_ref>(){}[0]
    final val hostname // com.apollographql.execution.reporting/ReportHeader.hostname|{}hostname[0]
        final fun <get-hostname>(): kotlin/String // com.apollographql.execution.reporting/ReportHeader.hostname.<get-hostname>|<get-hostname>(){}[0]
    final val runtime_version // com.apollographql.execution.reporting/ReportHeader.runtime_version|{}runtime_version[0]
        final fun <get-runtime_version>(): kotlin/String // com.apollographql.execution.reporting/ReportHeader.runtime_version.<get-runtime_version>|<get-runtime_version>(){}[0]
    final val service_version // com.apollographql.execution.reporting/ReportHeader.service_version|{}service_version[0]
        final fun <get-service_version>(): kotlin/String // com.apollographql.execution.reporting/ReportHeader.service_version.<get-service_version>|<get-service_version>(){}[0]
    final val uname // com.apollographql.execution.reporting/ReportHeader.uname|{}uname[0]
        final fun <get-uname>(): kotlin/String // com.apollographql.execution.reporting/ReportHeader.uname.<get-uname>|<get-uname>(){}[0]
}
final class com.apollographql.execution.reporting/StatsContext : com.squareup.wire/Message<com.apollographql.execution.reporting/StatsContext, kotlin/Nothing> { // com.apollographql.execution.reporting/StatsContext|null[0]
    constructor <init>(kotlin/String = ..., kotlin/String = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/StatsContext.<init>|<init>(kotlin.String;kotlin.String;okio.ByteString){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., okio/ByteString = ...): com.apollographql.execution.reporting/StatsContext // com.apollographql.execution.reporting/StatsContext.copy|copy(kotlin.String;kotlin.String;okio.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/StatsContext.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/StatsContext.hashCode|hashCode(){}[0]
    final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/StatsContext.newBuilder|newBuilder(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.reporting/StatsContext.toString|toString(){}[0]
    final object Companion { // com.apollographql.execution.reporting/StatsContext.Companion|null[0]
        final val ADAPTER // com.apollographql.execution.reporting/StatsContext.Companion.ADAPTER|{}ADAPTER[0]
            final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/StatsContext> // com.apollographql.execution.reporting/StatsContext.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
    }
    final val client_name // com.apollographql.execution.reporting/StatsContext.client_name|{}client_name[0]
        final fun <get-client_name>(): kotlin/String // com.apollographql.execution.reporting/StatsContext.client_name.<get-client_name>|<get-client_name>(){}[0]
    final val client_version // com.apollographql.execution.reporting/StatsContext.client_version|{}client_version[0]
        final fun <get-client_version>(): kotlin/String // com.apollographql.execution.reporting/StatsContext.client_version.<get-client_version>|<get-client_version>(){}[0]
}
final class com.apollographql.execution.reporting/Trace : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace|null[0]
    constructor <init>(com.squareup.wire/Instant? = ..., com.squareup.wire/Instant? = ..., kotlin/Long = ..., com.apollographql.execution.reporting/Trace.Node? = ..., kotlin/Boolean = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., com.apollographql.execution.reporting/Trace.Details? = ..., kotlin/String = ..., kotlin/String = ..., com.apollographql.execution.reporting/Trace.HTTP? = ..., com.apollographql.execution.reporting/Trace.CachePolicy? = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Double = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.<init>|<init>(com.squareup.wire.Instant?;com.squareup.wire.Instant?;kotlin.Long;com.apollographql.execution.reporting.Trace.Node?;kotlin.Boolean;kotlin.String;kotlin.String;kotlin.String;com.apollographql.execution.reporting.Trace.Details?;kotlin.String;kotlin.String;com.apollographql.execution.reporting.Trace.HTTP?;com.apollographql.execution.reporting.Trace.CachePolicy?;com.apollographql.execution.reporting.Trace.QueryPlanNode?;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Double;okio.ByteString){}[0]
    final class CachePolicy : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.CachePolicy, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.CachePolicy|null[0]
        constructor <init>(com.apollographql.execution.reporting/Trace.CachePolicy.Scope = ..., kotlin/Long = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.CachePolicy.<init>|<init>(com.apollographql.execution.reporting.Trace.CachePolicy.Scope;kotlin.Long;okio.ByteString){}[0]
        final enum class Scope : com.squareup.wire/WireEnum, kotlin/Enum<com.apollographql.execution.reporting/Trace.CachePolicy.Scope> { // com.apollographql.execution.reporting/Trace.CachePolicy.Scope|null[0]
            enum entry PRIVATE // com.apollographql.execution.reporting/Trace.CachePolicy.Scope.PRIVATE|null[0]
            enum entry PUBLIC // com.apollographql.execution.reporting/Trace.CachePolicy.Scope.PUBLIC|null[0]
            enum entry UNKNOWN // com.apollographql.execution.reporting/Trace.CachePolicy.Scope.UNKNOWN|null[0]
            final fun valueOf(kotlin/String): com.apollographql.execution.reporting/Trace.CachePolicy.Scope // com.apollographql.execution.reporting/Trace.CachePolicy.Scope.valueOf|valueOf#static(kotlin.String){}[0]
            final fun values(): kotlin/Array<com.apollographql.execution.reporting/Trace.CachePolicy.Scope> // com.apollographql.execution.reporting/Trace.CachePolicy.Scope.values|values#static(){}[0]
            final object Companion { // com.apollographql.execution.reporting/Trace.CachePolicy.Scope.Companion|null[0]
                final fun fromValue(kotlin/Int): com.apollographql.execution.reporting/Trace.CachePolicy.Scope? // com.apollographql.execution.reporting/Trace.CachePolicy.Scope.Companion.fromValue|fromValue(kotlin.Int){}[0]
                final val ADAPTER // com.apollographql.execution.reporting/Trace.CachePolicy.Scope.Companion.ADAPTER|{}ADAPTER[0]
                    final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.CachePolicy.Scope> // com.apollographql.execution.reporting/Trace.CachePolicy.Scope.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
            }
            final val entries // com.apollographql.execution.reporting/Trace.CachePolicy.Scope.entries|#static{}entries[0]
                final fun <get-entries>(): kotlin.enums/EnumEntries<com.apollographql.execution.reporting/Trace.CachePolicy.Scope> // com.apollographql.execution.reporting/Trace.CachePolicy.Scope.entries.<get-entries>|<get-entries>#static(){}[0]
            final val value // com.apollographql.execution.reporting/Trace.CachePolicy.Scope.value|{}value[0]
                final fun <get-value>(): kotlin/Int // com.apollographql.execution.reporting/Trace.CachePolicy.Scope.value.<get-value>|<get-value>(){}[0]
        }
        final fun copy(com.apollographql.execution.reporting/Trace.CachePolicy.Scope = ..., kotlin/Long = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.CachePolicy // com.apollographql.execution.reporting/Trace.CachePolicy.copy|copy(com.apollographql.execution.reporting.Trace.CachePolicy.Scope;kotlin.Long;okio.ByteString){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.CachePolicy.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.CachePolicy.hashCode|hashCode(){}[0]
        final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.CachePolicy.newBuilder|newBuilder(){}[0]
        final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.CachePolicy.toString|toString(){}[0]
        final object Companion { // com.apollographql.execution.reporting/Trace.CachePolicy.Companion|null[0]
            final val ADAPTER // com.apollographql.execution.reporting/Trace.CachePolicy.Companion.ADAPTER|{}ADAPTER[0]
                final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.CachePolicy> // com.apollographql.execution.reporting/Trace.CachePolicy.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
        }
        final val max_age_ns // com.apollographql.execution.reporting/Trace.CachePolicy.max_age_ns|{}max_age_ns[0]
            final fun <get-max_age_ns>(): kotlin/Long // com.apollographql.execution.reporting/Trace.CachePolicy.max_age_ns.<get-max_age_ns>|<get-max_age_ns>(){}[0]
        final val scope // com.apollographql.execution.reporting/Trace.CachePolicy.scope|{}scope[0]
            final fun <get-scope>(): com.apollographql.execution.reporting/Trace.CachePolicy.Scope // com.apollographql.execution.reporting/Trace.CachePolicy.scope.<get-scope>|<get-scope>(){}[0]
    }
    final class Details : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.Details, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.Details|null[0]
        constructor <init>(kotlin.collections/Map<kotlin/String, kotlin/String> = ..., kotlin/String = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.Details.<init>|<init>(kotlin.collections.Map<kotlin.String,kotlin.String>;kotlin.String;okio.ByteString){}[0]
        final fun copy(kotlin.collections/Map<kotlin/String, kotlin/String> = ..., kotlin/String = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.Details // com.apollographql.execution.reporting/Trace.Details.copy|copy(kotlin.collections.Map<kotlin.String,kotlin.String>;kotlin.String;okio.ByteString){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.Details.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.Details.hashCode|hashCode(){}[0]
        final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.Details.newBuilder|newBuilder(){}[0]
        final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.Details.toString|toString(){}[0]
        final object Companion { // com.apollographql.execution.reporting/Trace.Details.Companion|null[0]
            final val ADAPTER // com.apollographql.execution.reporting/Trace.Details.Companion.ADAPTER|{}ADAPTER[0]
                final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.Details> // com.apollographql.execution.reporting/Trace.Details.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
        }
        final val operation_name // com.apollographql.execution.reporting/Trace.Details.operation_name|{}operation_name[0]
            final fun <get-operation_name>(): kotlin/String // com.apollographql.execution.reporting/Trace.Details.operation_name.<get-operation_name>|<get-operation_name>(){}[0]
        final val variables_json // com.apollographql.execution.reporting/Trace.Details.variables_json|{}variables_json[0]
            final fun <get-variables_json>(): kotlin.collections/Map<kotlin/String, kotlin/String> // com.apollographql.execution.reporting/Trace.Details.variables_json.<get-variables_json>|<get-variables_json>(){}[0]
    }
    final class Error : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.Error, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.Error|null[0]
        constructor <init>(kotlin/String = ..., kotlin.collections/List<com.apollographql.execution.reporting/Trace.Location> = ..., kotlin/Long = ..., kotlin/String = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.Error.<init>|<init>(kotlin.String;kotlin.collections.List<com.apollographql.execution.reporting.Trace.Location>;kotlin.Long;kotlin.String;okio.ByteString){}[0]
        final fun copy(kotlin/String = ..., kotlin.collections/List<com.apollographql.execution.reporting/Trace.Location> = ..., kotlin/Long = ..., kotlin/String = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.Error // com.apollographql.execution.reporting/Trace.Error.copy|copy(kotlin.String;kotlin.collections.List<com.apollographql.execution.reporting.Trace.Location>;kotlin.Long;kotlin.String;okio.ByteString){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.Error.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.Error.hashCode|hashCode(){}[0]
        final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.Error.newBuilder|newBuilder(){}[0]
        final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.Error.toString|toString(){}[0]
        final object Companion { // com.apollographql.execution.reporting/Trace.Error.Companion|null[0]
            final val ADAPTER // com.apollographql.execution.reporting/Trace.Error.Companion.ADAPTER|{}ADAPTER[0]
                final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.Error> // com.apollographql.execution.reporting/Trace.Error.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
        }
        final val json // com.apollographql.execution.reporting/Trace.Error.json|{}json[0]
            final fun <get-json>(): kotlin/String // com.apollographql.execution.reporting/Trace.Error.json.<get-json>|<get-json>(){}[0]
        final val location // com.apollographql.execution.reporting/Trace.Error.location|{}location[0]
            final fun <get-location>(): kotlin.collections/List<com.apollographql.execution.reporting/Trace.Location> // com.apollographql.execution.reporting/Trace.Error.location.<get-location>|<get-location>(){}[0]
        final val message // com.apollographql.execution.reporting/Trace.Error.message|{}message[0]
            final fun <get-message>(): kotlin/String // com.apollographql.execution.reporting/Trace.Error.message.<get-message>|<get-message>(){}[0]
        final val time_ns // com.apollographql.execution.reporting/Trace.Error.time_ns|{}time_ns[0]
            final fun <get-time_ns>(): kotlin/Long // com.apollographql.execution.reporting/Trace.Error.time_ns.<get-time_ns>|<get-time_ns>(){}[0]
    }
    final class HTTP : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.HTTP, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.HTTP|null[0]
        constructor <init>(com.apollographql.execution.reporting/Trace.HTTP.Method = ..., kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/Trace.HTTP.Values> = ..., kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/Trace.HTTP.Values> = ..., kotlin/Int = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.HTTP.<init>|<init>(com.apollographql.execution.reporting.Trace.HTTP.Method;kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.Trace.HTTP.Values>;kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.Trace.HTTP.Values>;kotlin.Int;okio.ByteString){}[0]
        final class Values : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.HTTP.Values, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.HTTP.Values|null[0]
            constructor <init>(kotlin.collections/List<kotlin/String> = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.HTTP.Values.<init>|<init>(kotlin.collections.List<kotlin.String>;okio.ByteString){}[0]
            final fun copy(kotlin.collections/List<kotlin/String> = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.HTTP.Values // com.apollographql.execution.reporting/Trace.HTTP.Values.copy|copy(kotlin.collections.List<kotlin.String>;okio.ByteString){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.HTTP.Values.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.HTTP.Values.hashCode|hashCode(){}[0]
            final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.HTTP.Values.newBuilder|newBuilder(){}[0]
            final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.HTTP.Values.toString|toString(){}[0]
            final object Companion { // com.apollographql.execution.reporting/Trace.HTTP.Values.Companion|null[0]
                final val ADAPTER // com.apollographql.execution.reporting/Trace.HTTP.Values.Companion.ADAPTER|{}ADAPTER[0]
                    final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.HTTP.Values> // com.apollographql.execution.reporting/Trace.HTTP.Values.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
            }
            final val value_ // com.apollographql.execution.reporting/Trace.HTTP.Values.value_|{}value_[0]
                final fun <get-value_>(): kotlin.collections/List<kotlin/String> // com.apollographql.execution.reporting/Trace.HTTP.Values.value_.<get-value_>|<get-value_>(){}[0]
        }
        final enum class Method : com.squareup.wire/WireEnum, kotlin/Enum<com.apollographql.execution.reporting/Trace.HTTP.Method> { // com.apollographql.execution.reporting/Trace.HTTP.Method|null[0]
            enum entry CONNECT // com.apollographql.execution.reporting/Trace.HTTP.Method.CONNECT|null[0]
            enum entry DELETE // com.apollographql.execution.reporting/Trace.HTTP.Method.DELETE|null[0]
            enum entry GET // com.apollographql.execution.reporting/Trace.HTTP.Method.GET|null[0]
            enum entry HEAD // com.apollographql.execution.reporting/Trace.HTTP.Method.HEAD|null[0]
            enum entry OPTIONS // com.apollographql.execution.reporting/Trace.HTTP.Method.OPTIONS|null[0]
            enum entry PATCH // com.apollographql.execution.reporting/Trace.HTTP.Method.PATCH|null[0]
            enum entry POST // com.apollographql.execution.reporting/Trace.HTTP.Method.POST|null[0]
            enum entry PUT // com.apollographql.execution.reporting/Trace.HTTP.Method.PUT|null[0]
            enum entry TRACE // com.apollographql.execution.reporting/Trace.HTTP.Method.TRACE|null[0]
            enum entry UNKNOWN // com.apollographql.execution.reporting/Trace.HTTP.Method.UNKNOWN|null[0]
            final fun valueOf(kotlin/String): com.apollographql.execution.reporting/Trace.HTTP.Method // com.apollographql.execution.reporting/Trace.HTTP.Method.valueOf|valueOf#static(kotlin.String){}[0]
            final fun values(): kotlin/Array<com.apollographql.execution.reporting/Trace.HTTP.Method> // com.apollographql.execution.reporting/Trace.HTTP.Method.values|values#static(){}[0]
            final object Companion { // com.apollographql.execution.reporting/Trace.HTTP.Method.Companion|null[0]
                final fun fromValue(kotlin/Int): com.apollographql.execution.reporting/Trace.HTTP.Method? // com.apollographql.execution.reporting/Trace.HTTP.Method.Companion.fromValue|fromValue(kotlin.Int){}[0]
                final val ADAPTER // com.apollographql.execution.reporting/Trace.HTTP.Method.Companion.ADAPTER|{}ADAPTER[0]
                    final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.HTTP.Method> // com.apollographql.execution.reporting/Trace.HTTP.Method.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
            }
            final val entries // com.apollographql.execution.reporting/Trace.HTTP.Method.entries|#static{}entries[0]
                final fun <get-entries>(): kotlin.enums/EnumEntries<com.apollographql.execution.reporting/Trace.HTTP.Method> // com.apollographql.execution.reporting/Trace.HTTP.Method.entries.<get-entries>|<get-entries>#static(){}[0]
            final val value // com.apollographql.execution.reporting/Trace.HTTP.Method.value|{}value[0]
                final fun <get-value>(): kotlin/Int // com.apollographql.execution.reporting/Trace.HTTP.Method.value.<get-value>|<get-value>(){}[0]
        }
        final fun copy(com.apollographql.execution.reporting/Trace.HTTP.Method = ..., kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/Trace.HTTP.Values> = ..., kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/Trace.HTTP.Values> = ..., kotlin/Int = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.HTTP // com.apollographql.execution.reporting/Trace.HTTP.copy|copy(com.apollographql.execution.reporting.Trace.HTTP.Method;kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.Trace.HTTP.Values>;kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.Trace.HTTP.Values>;kotlin.Int;okio.ByteString){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.HTTP.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.HTTP.hashCode|hashCode(){}[0]
        final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.HTTP.newBuilder|newBuilder(){}[0]
        final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.HTTP.toString|toString(){}[0]
        final object Companion { // com.apollographql.execution.reporting/Trace.HTTP.Companion|null[0]
            final val ADAPTER // com.apollographql.execution.reporting/Trace.HTTP.Companion.ADAPTER|{}ADAPTER[0]
                final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.HTTP> // com.apollographql.execution.reporting/Trace.HTTP.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
        }
        final val method // com.apollographql.execution.reporting/Trace.HTTP.method|{}method[0]
            final fun <get-method>(): com.apollographql.execution.reporting/Trace.HTTP.Method // com.apollographql.execution.reporting/Trace.HTTP.method.<get-method>|<get-method>(){}[0]
        final val request_headers // com.apollographql.execution.reporting/Trace.HTTP.request_headers|{}request_headers[0]
            final fun <get-request_headers>(): kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/Trace.HTTP.Values> // com.apollographql.execution.reporting/Trace.HTTP.request_headers.<get-request_headers>|<get-request_headers>(){}[0]
        final val response_headers // com.apollographql.execution.reporting/Trace.HTTP.response_headers|{}response_headers[0]
            final fun <get-response_headers>(): kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/Trace.HTTP.Values> // com.apollographql.execution.reporting/Trace.HTTP.response_headers.<get-response_headers>|<get-response_headers>(){}[0]
        final val status_code // com.apollographql.execution.reporting/Trace.HTTP.status_code|{}status_code[0]
            final fun <get-status_code>(): kotlin/Int // com.apollographql.execution.reporting/Trace.HTTP.status_code.<get-status_code>|<get-status_code>(){}[0]
    }
    final class Location : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.Location, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.Location|null[0]
        constructor <init>(kotlin/Int = ..., kotlin/Int = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.Location.<init>|<init>(kotlin.Int;kotlin.Int;okio.ByteString){}[0]
        final fun copy(kotlin/Int = ..., kotlin/Int = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.Location // com.apollographql.execution.reporting/Trace.Location.copy|copy(kotlin.Int;kotlin.Int;okio.ByteString){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.Location.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.Location.hashCode|hashCode(){}[0]
        final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.Location.newBuilder|newBuilder(){}[0]
        final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.Location.toString|toString(){}[0]
        final object Companion { // com.apollographql.execution.reporting/Trace.Location.Companion|null[0]
            final val ADAPTER // com.apollographql.execution.reporting/Trace.Location.Companion.ADAPTER|{}ADAPTER[0]
                final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.Location> // com.apollographql.execution.reporting/Trace.Location.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
        }
        final val column // com.apollographql.execution.reporting/Trace.Location.column|{}column[0]
            final fun <get-column>(): kotlin/Int // com.apollographql.execution.reporting/Trace.Location.column.<get-column>|<get-column>(){}[0]
        final val line // com.apollographql.execution.reporting/Trace.Location.line|{}line[0]
            final fun <get-line>(): kotlin/Int // com.apollographql.execution.reporting/Trace.Location.line.<get-line>|<get-line>(){}[0]
    }
    final class Node : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.Node, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.Node|null[0]
        constructor <init>(kotlin/String? = ..., kotlin/Int? = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., com.apollographql.execution.reporting/Trace.CachePolicy? = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin.collections/List<com.apollographql.execution.reporting/Trace.Error> = ..., kotlin.collections/List<com.apollographql.execution.reporting/Trace.Node> = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.Node.<init>|<init>(kotlin.String?;kotlin.Int?;kotlin.String;kotlin.String;kotlin.String;com.apollographql.execution.reporting.Trace.CachePolicy?;kotlin.Long;kotlin.Long;kotlin.collections.List<com.apollographql.execution.reporting.Trace.Error>;kotlin.collections.List<com.apollographql.execution.reporting.Trace.Node>;okio.ByteString){}[0]
        final fun copy(kotlin/String? = ..., kotlin/Int? = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., com.apollographql.execution.reporting/Trace.CachePolicy? = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin.collections/List<com.apollographql.execution.reporting/Trace.Error> = ..., kotlin.collections/List<com.apollographql.execution.reporting/Trace.Node> = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.Node // com.apollographql.execution.reporting/Trace.Node.copy|copy(kotlin.String?;kotlin.Int?;kotlin.String;kotlin.String;kotlin.String;com.apollographql.execution.reporting.Trace.CachePolicy?;kotlin.Long;kotlin.Long;kotlin.collections.List<com.apollographql.execution.reporting.Trace.Error>;kotlin.collections.List<com.apollographql.execution.reporting.Trace.Node>;okio.ByteString){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.Node.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.Node.hashCode|hashCode(){}[0]
        final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.Node.newBuilder|newBuilder(){}[0]
        final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.Node.toString|toString(){}[0]
        final object Companion { // com.apollographql.execution.reporting/Trace.Node.Companion|null[0]
            final val ADAPTER // com.apollographql.execution.reporting/Trace.Node.Companion.ADAPTER|{}ADAPTER[0]
                final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.Node> // com.apollographql.execution.reporting/Trace.Node.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
        }
        final val cache_policy // com.apollographql.execution.reporting/Trace.Node.cache_policy|{}cache_policy[0]
            final fun <get-cache_policy>(): com.apollographql.execution.reporting/Trace.CachePolicy? // com.apollographql.execution.reporting/Trace.Node.cache_policy.<get-cache_policy>|<get-cache_policy>(){}[0]
        final val child // com.apollographql.execution.reporting/Trace.Node.child|{}child[0]
            final fun <get-child>(): kotlin.collections/List<com.apollographql.execution.reporting/Trace.Node> // com.apollographql.execution.reporting/Trace.Node.child.<get-child>|<get-child>(){}[0]
        final val end_time // com.apollographql.execution.reporting/Trace.Node.end_time|{}end_time[0]
            final fun <get-end_time>(): kotlin/Long // com.apollographql.execution.reporting/Trace.Node.end_time.<get-end_time>|<get-end_time>(){}[0]
        final val error // com.apollographql.execution.reporting/Trace.Node.error|{}error[0]
            final fun <get-error>(): kotlin.collections/List<com.apollographql.execution.reporting/Trace.Error> // com.apollographql.execution.reporting/Trace.Node.error.<get-error>|<get-error>(){}[0]
        final val index // com.apollographql.execution.reporting/Trace.Node.index|{}index[0]
            final fun <get-index>(): kotlin/Int? // com.apollographql.execution.reporting/Trace.Node.index.<get-index>|<get-index>(){}[0]
        final val original_field_name // com.apollographql.execution.reporting/Trace.Node.original_field_name|{}original_field_name[0]
            final fun <get-original_field_name>(): kotlin/String // com.apollographql.execution.reporting/Trace.Node.original_field_name.<get-original_field_name>|<get-original_field_name>(){}[0]
        final val parent_type // com.apollographql.execution.reporting/Trace.Node.parent_type|{}parent_type[0]
            final fun <get-parent_type>(): kotlin/String // com.apollographql.execution.reporting/Trace.Node.parent_type.<get-parent_type>|<get-parent_type>(){}[0]
        final val response_name // com.apollographql.execution.reporting/Trace.Node.response_name|{}response_name[0]
            final fun <get-response_name>(): kotlin/String? // com.apollographql.execution.reporting/Trace.Node.response_name.<get-response_name>|<get-response_name>(){}[0]
        final val start_time // com.apollographql.execution.reporting/Trace.Node.start_time|{}start_time[0]
            final fun <get-start_time>(): kotlin/Long // com.apollographql.execution.reporting/Trace.Node.start_time.<get-start_time>|<get-start_time>(){}[0]
        final val type // com.apollographql.execution.reporting/Trace.Node.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.apollographql.execution.reporting/Trace.Node.type.<get-type>|<get-type>(){}[0]
    }
    final class QueryPlanNode : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.QueryPlanNode, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.QueryPlanNode|null[0]
        constructor <init>(com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode? = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode? = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode? = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode? = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode? = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode? = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.QueryPlanNode.<init>|<init>(com.apollographql.execution.reporting.Trace.QueryPlanNode.SequenceNode?;com.apollographql.execution.reporting.Trace.QueryPlanNode.ParallelNode?;com.apollographql.execution.reporting.Trace.QueryPlanNode.FetchNode?;com.apollographql.execution.reporting.Trace.QueryPlanNode.FlattenNode?;com.apollographql.execution.reporting.Trace.QueryPlanNode.DeferNode?;com.apollographql.execution.reporting.Trace.QueryPlanNode.ConditionNode?;okio.ByteString){}[0]
        final class ConditionNode : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode|null[0]
            constructor <init>(kotlin/String = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode? = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode? = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.<init>|<init>(kotlin.String;com.apollographql.execution.reporting.Trace.QueryPlanNode?;com.apollographql.execution.reporting.Trace.QueryPlanNode?;okio.ByteString){}[0]
            final fun copy(kotlin/String = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode? = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode? = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.copy|copy(kotlin.String;com.apollographql.execution.reporting.Trace.QueryPlanNode?;com.apollographql.execution.reporting.Trace.QueryPlanNode?;okio.ByteString){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.hashCode|hashCode(){}[0]
            final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.newBuilder|newBuilder(){}[0]
            final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.toString|toString(){}[0]
            final object Companion { // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.Companion|null[0]
                final val ADAPTER // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.Companion.ADAPTER|{}ADAPTER[0]
                    final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode> // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
            }
            final val condition // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.condition|{}condition[0]
                final fun <get-condition>(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.condition.<get-condition>|<get-condition>(){}[0]
            final val else_clause // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.else_clause|{}else_clause[0]
                final fun <get-else_clause>(): com.apollographql.execution.reporting/Trace.QueryPlanNode? // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.else_clause.<get-else_clause>|<get-else_clause>(){}[0]
            final val if_clause // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.if_clause|{}if_clause[0]
                final fun <get-if_clause>(): com.apollographql.execution.reporting/Trace.QueryPlanNode? // com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode.if_clause.<get-if_clause>|<get-if_clause>(){}[0]
        }
        final class DeferNode : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode|null[0]
            constructor <init>(com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary? = ..., kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode> = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode.<init>|<init>(com.apollographql.execution.reporting.Trace.QueryPlanNode.DeferNodePrimary?;kotlin.collections.List<com.apollographql.execution.reporting.Trace.QueryPlanNode.DeferredNode>;okio.ByteString){}[0]
            final fun copy(com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary? = ..., kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode> = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode.copy|copy(com.apollographql.execution.reporting.Trace.QueryPlanNode.DeferNodePrimary?;kotlin.collections.List<com.apollographql.execution.reporting.Trace.QueryPlanNode.DeferredNode>;okio.ByteString){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode.hashCode|hashCode(){}[0]
            final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode.newBuilder|newBuilder(){}[0]
            final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode.toString|toString(){}[0]
            final object Companion { // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode.Companion|null[0]
                final val ADAPTER // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode.Companion.ADAPTER|{}ADAPTER[0]
                    final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode> // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
            }
            final val deferred // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode.deferred|{}deferred[0]
                final fun <get-deferred>(): kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode> // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode.deferred.<get-deferred>|<get-deferred>(){}[0]
            final val primary // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode.primary|{}primary[0]
                final fun <get-primary>(): com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary? // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode.primary.<get-primary>|<get-primary>(){}[0]
        }
        final class DeferNodePrimary : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary|null[0]
            constructor <init>(com.apollographql.execution.reporting/Trace.QueryPlanNode? = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary.<init>|<init>(com.apollographql.execution.reporting.Trace.QueryPlanNode?;okio.ByteString){}[0]
            final fun copy(com.apollographql.execution.reporting/Trace.QueryPlanNode? = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary.copy|copy(com.apollographql.execution.reporting.Trace.QueryPlanNode?;okio.ByteString){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary.hashCode|hashCode(){}[0]
            final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary.newBuilder|newBuilder(){}[0]
            final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary.toString|toString(){}[0]
            final object Companion { // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary.Companion|null[0]
                final val ADAPTER // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary.Companion.ADAPTER|{}ADAPTER[0]
                    final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary> // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
            }
            final val node // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary.node|{}node[0]
                final fun <get-node>(): com.apollographql.execution.reporting/Trace.QueryPlanNode? // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNodePrimary.node.<get-node>|<get-node>(){}[0]
        }
        final class DeferredNode : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode|null[0]
            constructor <init>(kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends> = ..., kotlin/String = ..., kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement> = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode? = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.<init>|<init>(kotlin.collections.List<com.apollographql.execution.reporting.Trace.QueryPlanNode.DeferredNodeDepends>;kotlin.String;kotlin.collections.List<com.apollographql.execution.reporting.Trace.QueryPlanNode.ResponsePathElement>;com.apollographql.execution.reporting.Trace.QueryPlanNode?;okio.ByteString){}[0]
            final fun copy(kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends> = ..., kotlin/String = ..., kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement> = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode? = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.copy|copy(kotlin.collections.List<com.apollographql.execution.reporting.Trace.QueryPlanNode.DeferredNodeDepends>;kotlin.String;kotlin.collections.List<com.apollographql.execution.reporting.Trace.QueryPlanNode.ResponsePathElement>;com.apollographql.execution.reporting.Trace.QueryPlanNode?;okio.ByteString){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.hashCode|hashCode(){}[0]
            final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.newBuilder|newBuilder(){}[0]
            final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.toString|toString(){}[0]
            final object Companion { // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.Companion|null[0]
                final val ADAPTER // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.Companion.ADAPTER|{}ADAPTER[0]
                    final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode> // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
            }
            final val depends // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.depends|{}depends[0]
                final fun <get-depends>(): kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends> // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.depends.<get-depends>|<get-depends>(){}[0]
            final val label // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.label|{}label[0]
                final fun <get-label>(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.label.<get-label>|<get-label>(){}[0]
            final val node // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.node|{}node[0]
                final fun <get-node>(): com.apollographql.execution.reporting/Trace.QueryPlanNode? // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.node.<get-node>|<get-node>(){}[0]
            final val path // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.path|{}path[0]
                final fun <get-path>(): kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement> // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNode.path.<get-path>|<get-path>(){}[0]
        }
        final class DeferredNodeDepends : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends|null[0]
            constructor <init>(kotlin/String = ..., kotlin/String = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends.<init>|<init>(kotlin.String;kotlin.String;okio.ByteString){}[0]
            final fun copy(kotlin/String = ..., kotlin/String = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends.copy|copy(kotlin.String;kotlin.String;okio.ByteString){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends.hashCode|hashCode(){}[0]
            final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends.newBuilder|newBuilder(){}[0]
            final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends.toString|toString(){}[0]
            final object Companion { // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends.Companion|null[0]
                final val ADAPTER // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends.Companion.ADAPTER|{}ADAPTER[0]
                    final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends> // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
            }
            final val defer_label // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends.defer_label|{}defer_label[0]
                final fun <get-defer_label>(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends.defer_label.<get-defer_label>|<get-defer_label>(){}[0]
            final val id // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends.id|{}id[0]
                final fun <get-id>(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferredNodeDepends.id.<get-id>|<get-id>(){}[0]
        }
        final class FetchNode : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode|null[0]
            constructor <init>(kotlin/String = ..., kotlin/Boolean = ..., com.apollographql.execution.reporting/Trace? = ..., kotlin/Long = ..., com.squareup.wire/Instant? = ..., com.squareup.wire/Instant? = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.<init>|<init>(kotlin.String;kotlin.Boolean;com.apollographql.execution.reporting.Trace?;kotlin.Long;com.squareup.wire.Instant?;com.squareup.wire.Instant?;okio.ByteString){}[0]
            final fun copy(kotlin/String = ..., kotlin/Boolean = ..., com.apollographql.execution.reporting/Trace? = ..., kotlin/Long = ..., com.squareup.wire/Instant? = ..., com.squareup.wire/Instant? = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.copy|copy(kotlin.String;kotlin.Boolean;com.apollographql.execution.reporting.Trace?;kotlin.Long;com.squareup.wire.Instant?;com.squareup.wire.Instant?;okio.ByteString){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.hashCode|hashCode(){}[0]
            final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.newBuilder|newBuilder(){}[0]
            final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.toString|toString(){}[0]
            final object Companion { // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.Companion|null[0]
                final val ADAPTER // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.Companion.ADAPTER|{}ADAPTER[0]
                    final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode> // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
            }
            final val received_time // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.received_time|{}received_time[0]
                final fun <get-received_time>(): com.squareup.wire/Instant? // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.received_time.<get-received_time>|<get-received_time>(){}[0]
            final val sent_time // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.sent_time|{}sent_time[0]
                final fun <get-sent_time>(): com.squareup.wire/Instant? // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.sent_time.<get-sent_time>|<get-sent_time>(){}[0]
            final val sent_time_offset // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.sent_time_offset|{}sent_time_offset[0]
                final fun <get-sent_time_offset>(): kotlin/Long // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.sent_time_offset.<get-sent_time_offset>|<get-sent_time_offset>(){}[0]
            final val service_name // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.service_name|{}service_name[0]
                final fun <get-service_name>(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.service_name.<get-service_name>|<get-service_name>(){}[0]
            final val trace // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.trace|{}trace[0]
                final fun <get-trace>(): com.apollographql.execution.reporting/Trace? // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.trace.<get-trace>|<get-trace>(){}[0]
            final val trace_parsing_failed // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.trace_parsing_failed|{}trace_parsing_failed[0]
                final fun <get-trace_parsing_failed>(): kotlin/Boolean // com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode.trace_parsing_failed.<get-trace_parsing_failed>|<get-trace_parsing_failed>(){}[0]
        }
        final class FlattenNode : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode|null[0]
            constructor <init>(kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement> = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode? = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode.<init>|<init>(kotlin.collections.List<com.apollographql.execution.reporting.Trace.QueryPlanNode.ResponsePathElement>;com.apollographql.execution.reporting.Trace.QueryPlanNode?;okio.ByteString){}[0]
            final fun copy(kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement> = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode? = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode // com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode.copy|copy(kotlin.collections.List<com.apollographql.execution.reporting.Trace.QueryPlanNode.ResponsePathElement>;com.apollographql.execution.reporting.Trace.QueryPlanNode?;okio.ByteString){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode.hashCode|hashCode(){}[0]
            final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode.newBuilder|newBuilder(){}[0]
            final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode.toString|toString(){}[0]
            final object Companion { // com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode.Companion|null[0]
                final val ADAPTER // com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode.Companion.ADAPTER|{}ADAPTER[0]
                    final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode> // com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
            }
            final val node // com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode.node|{}node[0]
                final fun <get-node>(): com.apollographql.execution.reporting/Trace.QueryPlanNode? // com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode.node.<get-node>|<get-node>(){}[0]
            final val response_path // com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode.response_path|{}response_path[0]
                final fun <get-response_path>(): kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement> // com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode.response_path.<get-response_path>|<get-response_path>(){}[0]
        }
        final class ParallelNode : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode|null[0]
            constructor <init>(kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode> = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode.<init>|<init>(kotlin.collections.List<com.apollographql.execution.reporting.Trace.QueryPlanNode>;okio.ByteString){}[0]
            final fun copy(kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode> = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode // com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode.copy|copy(kotlin.collections.List<com.apollographql.execution.reporting.Trace.QueryPlanNode>;okio.ByteString){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode.hashCode|hashCode(){}[0]
            final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode.newBuilder|newBuilder(){}[0]
            final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode.toString|toString(){}[0]
            final object Companion { // com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode.Companion|null[0]
                final val ADAPTER // com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode.Companion.ADAPTER|{}ADAPTER[0]
                    final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode> // com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
            }
            final val nodes // com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode.nodes|{}nodes[0]
                final fun <get-nodes>(): kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode> // com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode.nodes.<get-nodes>|<get-nodes>(){}[0]
        }
        final class ResponsePathElement : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement|null[0]
            constructor <init>(kotlin/String? = ..., kotlin/Int? = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement.<init>|<init>(kotlin.String?;kotlin.Int?;okio.ByteString){}[0]
            final fun copy(kotlin/String? = ..., kotlin/Int? = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement // com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement.copy|copy(kotlin.String?;kotlin.Int?;okio.ByteString){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement.hashCode|hashCode(){}[0]
            final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement.newBuilder|newBuilder(){}[0]
            final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement.toString|toString(){}[0]
            final object Companion { // com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement.Companion|null[0]
                final val ADAPTER // com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement.Companion.ADAPTER|{}ADAPTER[0]
                    final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement> // com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
            }
            final val field_name // com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement.field_name|{}field_name[0]
                final fun <get-field_name>(): kotlin/String? // com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement.field_name.<get-field_name>|<get-field_name>(){}[0]
            final val index // com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement.index|{}index[0]
                final fun <get-index>(): kotlin/Int? // com.apollographql.execution.reporting/Trace.QueryPlanNode.ResponsePathElement.index.<get-index>|<get-index>(){}[0]
        }
        final class SequenceNode : com.squareup.wire/Message<com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode, kotlin/Nothing> { // com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode|null[0]
            constructor <init>(kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode> = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode.<init>|<init>(kotlin.collections.List<com.apollographql.execution.reporting.Trace.QueryPlanNode>;okio.ByteString){}[0]
            final fun copy(kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode> = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode // com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode.copy|copy(kotlin.collections.List<com.apollographql.execution.reporting.Trace.QueryPlanNode>;okio.ByteString){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode.hashCode|hashCode(){}[0]
            final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode.newBuilder|newBuilder(){}[0]
            final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode.toString|toString(){}[0]
            final object Companion { // com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode.Companion|null[0]
                final val ADAPTER // com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode.Companion.ADAPTER|{}ADAPTER[0]
                    final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode> // com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
            }
            final val nodes // com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode.nodes|{}nodes[0]
                final fun <get-nodes>(): kotlin.collections/List<com.apollographql.execution.reporting/Trace.QueryPlanNode> // com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode.nodes.<get-nodes>|<get-nodes>(){}[0]
        }
        final fun copy(com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode? = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode? = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode? = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode? = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode? = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode? = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace.QueryPlanNode // com.apollographql.execution.reporting/Trace.QueryPlanNode.copy|copy(com.apollographql.execution.reporting.Trace.QueryPlanNode.SequenceNode?;com.apollographql.execution.reporting.Trace.QueryPlanNode.ParallelNode?;com.apollographql.execution.reporting.Trace.QueryPlanNode.FetchNode?;com.apollographql.execution.reporting.Trace.QueryPlanNode.FlattenNode?;com.apollographql.execution.reporting.Trace.QueryPlanNode.DeferNode?;com.apollographql.execution.reporting.Trace.QueryPlanNode.ConditionNode?;okio.ByteString){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.QueryPlanNode.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.QueryPlanNode.hashCode|hashCode(){}[0]
        final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.QueryPlanNode.newBuilder|newBuilder(){}[0]
        final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.QueryPlanNode.toString|toString(){}[0]
        final object Companion { // com.apollographql.execution.reporting/Trace.QueryPlanNode.Companion|null[0]
            final val ADAPTER // com.apollographql.execution.reporting/Trace.QueryPlanNode.Companion.ADAPTER|{}ADAPTER[0]
                final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace.QueryPlanNode> // com.apollographql.execution.reporting/Trace.QueryPlanNode.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
        }
        final val condition // com.apollographql.execution.reporting/Trace.QueryPlanNode.condition|{}condition[0]
            final fun <get-condition>(): com.apollographql.execution.reporting/Trace.QueryPlanNode.ConditionNode? // com.apollographql.execution.reporting/Trace.QueryPlanNode.condition.<get-condition>|<get-condition>(){}[0]
        final val defer // com.apollographql.execution.reporting/Trace.QueryPlanNode.defer|{}defer[0]
            final fun <get-defer>(): com.apollographql.execution.reporting/Trace.QueryPlanNode.DeferNode? // com.apollographql.execution.reporting/Trace.QueryPlanNode.defer.<get-defer>|<get-defer>(){}[0]
        final val fetch // com.apollographql.execution.reporting/Trace.QueryPlanNode.fetch|{}fetch[0]
            final fun <get-fetch>(): com.apollographql.execution.reporting/Trace.QueryPlanNode.FetchNode? // com.apollographql.execution.reporting/Trace.QueryPlanNode.fetch.<get-fetch>|<get-fetch>(){}[0]
        final val flatten // com.apollographql.execution.reporting/Trace.QueryPlanNode.flatten|{}flatten[0]
            final fun <get-flatten>(): com.apollographql.execution.reporting/Trace.QueryPlanNode.FlattenNode? // com.apollographql.execution.reporting/Trace.QueryPlanNode.flatten.<get-flatten>|<get-flatten>(){}[0]
        final val parallel // com.apollographql.execution.reporting/Trace.QueryPlanNode.parallel|{}parallel[0]
            final fun <get-parallel>(): com.apollographql.execution.reporting/Trace.QueryPlanNode.ParallelNode? // com.apollographql.execution.reporting/Trace.QueryPlanNode.parallel.<get-parallel>|<get-parallel>(){}[0]
        final val sequence // com.apollographql.execution.reporting/Trace.QueryPlanNode.sequence|{}sequence[0]
            final fun <get-sequence>(): com.apollographql.execution.reporting/Trace.QueryPlanNode.SequenceNode? // com.apollographql.execution.reporting/Trace.QueryPlanNode.sequence.<get-sequence>|<get-sequence>(){}[0]
    }
    final fun copy(com.squareup.wire/Instant? = ..., com.squareup.wire/Instant? = ..., kotlin/Long = ..., com.apollographql.execution.reporting/Trace.Node? = ..., kotlin/Boolean = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., com.apollographql.execution.reporting/Trace.Details? = ..., kotlin/String = ..., kotlin/String = ..., com.apollographql.execution.reporting/Trace.HTTP? = ..., com.apollographql.execution.reporting/Trace.CachePolicy? = ..., com.apollographql.execution.reporting/Trace.QueryPlanNode? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Double = ..., okio/ByteString = ...): com.apollographql.execution.reporting/Trace // com.apollographql.execution.reporting/Trace.copy|copy(com.squareup.wire.Instant?;com.squareup.wire.Instant?;kotlin.Long;com.apollographql.execution.reporting.Trace.Node?;kotlin.Boolean;kotlin.String;kotlin.String;kotlin.String;com.apollographql.execution.reporting.Trace.Details?;kotlin.String;kotlin.String;com.apollographql.execution.reporting.Trace.HTTP?;com.apollographql.execution.reporting.Trace.CachePolicy?;com.apollographql.execution.reporting.Trace.QueryPlanNode?;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Double;okio.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/Trace.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/Trace.hashCode|hashCode(){}[0]
    final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/Trace.newBuilder|newBuilder(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.reporting/Trace.toString|toString(){}[0]
    final object Companion { // com.apollographql.execution.reporting/Trace.Companion|null[0]
        final val ADAPTER // com.apollographql.execution.reporting/Trace.Companion.ADAPTER|{}ADAPTER[0]
            final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/Trace> // com.apollographql.execution.reporting/Trace.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
    }
    final val cache_policy // com.apollographql.execution.reporting/Trace.cache_policy|{}cache_policy[0]
        final fun <get-cache_policy>(): com.apollographql.execution.reporting/Trace.CachePolicy? // com.apollographql.execution.reporting/Trace.cache_policy.<get-cache_policy>|<get-cache_policy>(){}[0]
    final val client_name // com.apollographql.execution.reporting/Trace.client_name|{}client_name[0]
        final fun <get-client_name>(): kotlin/String // com.apollographql.execution.reporting/Trace.client_name.<get-client_name>|<get-client_name>(){}[0]
    final val client_version // com.apollographql.execution.reporting/Trace.client_version|{}client_version[0]
        final fun <get-client_version>(): kotlin/String // com.apollographql.execution.reporting/Trace.client_version.<get-client_version>|<get-client_version>(){}[0]
    final val details // com.apollographql.execution.reporting/Trace.details|{}details[0]
        final fun <get-details>(): com.apollographql.execution.reporting/Trace.Details? // com.apollographql.execution.reporting/Trace.details.<get-details>|<get-details>(){}[0]
    final val duration_ns // com.apollographql.execution.reporting/Trace.duration_ns|{}duration_ns[0]
        final fun <get-duration_ns>(): kotlin/Long // com.apollographql.execution.reporting/Trace.duration_ns.<get-duration_ns>|<get-duration_ns>(){}[0]
    final val end_time // com.apollographql.execution.reporting/Trace.end_time|{}end_time[0]
        final fun <get-end_time>(): com.squareup.wire/Instant? // com.apollographql.execution.reporting/Trace.end_time.<get-end_time>|<get-end_time>(){}[0]
    final val field_execution_weight // com.apollographql.execution.reporting/Trace.field_execution_weight|{}field_execution_weight[0]
        final fun <get-field_execution_weight>(): kotlin/Double // com.apollographql.execution.reporting/Trace.field_execution_weight.<get-field_execution_weight>|<get-field_execution_weight>(){}[0]
    final val forbidden_operation // com.apollographql.execution.reporting/Trace.forbidden_operation|{}forbidden_operation[0]
        final fun <get-forbidden_operation>(): kotlin/Boolean // com.apollographql.execution.reporting/Trace.forbidden_operation.<get-forbidden_operation>|<get-forbidden_operation>(){}[0]
    final val full_query_cache_hit // com.apollographql.execution.reporting/Trace.full_query_cache_hit|{}full_query_cache_hit[0]
        final fun <get-full_query_cache_hit>(): kotlin/Boolean // com.apollographql.execution.reporting/Trace.full_query_cache_hit.<get-full_query_cache_hit>|<get-full_query_cache_hit>(){}[0]
    final val http // com.apollographql.execution.reporting/Trace.http|{}http[0]
        final fun <get-http>(): com.apollographql.execution.reporting/Trace.HTTP? // com.apollographql.execution.reporting/Trace.http.<get-http>|<get-http>(){}[0]
    final val is_incomplete // com.apollographql.execution.reporting/Trace.is_incomplete|{}is_incomplete[0]
        final fun <get-is_incomplete>(): kotlin/Boolean // com.apollographql.execution.reporting/Trace.is_incomplete.<get-is_incomplete>|<get-is_incomplete>(){}[0]
    final val persisted_query_hit // com.apollographql.execution.reporting/Trace.persisted_query_hit|{}persisted_query_hit[0]
        final fun <get-persisted_query_hit>(): kotlin/Boolean // com.apollographql.execution.reporting/Trace.persisted_query_hit.<get-persisted_query_hit>|<get-persisted_query_hit>(){}[0]
    final val persisted_query_register // com.apollographql.execution.reporting/Trace.persisted_query_register|{}persisted_query_register[0]
        final fun <get-persisted_query_register>(): kotlin/Boolean // com.apollographql.execution.reporting/Trace.persisted_query_register.<get-persisted_query_register>|<get-persisted_query_register>(){}[0]
    final val query_plan // com.apollographql.execution.reporting/Trace.query_plan|{}query_plan[0]
        final fun <get-query_plan>(): com.apollographql.execution.reporting/Trace.QueryPlanNode? // com.apollographql.execution.reporting/Trace.query_plan.<get-query_plan>|<get-query_plan>(){}[0]
    final val registered_operation // com.apollographql.execution.reporting/Trace.registered_operation|{}registered_operation[0]
        final fun <get-registered_operation>(): kotlin/Boolean // com.apollographql.execution.reporting/Trace.registered_operation.<get-registered_operation>|<get-registered_operation>(){}[0]
    final val root // com.apollographql.execution.reporting/Trace.root|{}root[0]
        final fun <get-root>(): com.apollographql.execution.reporting/Trace.Node? // com.apollographql.execution.reporting/Trace.root.<get-root>|<get-root>(){}[0]
    final val signature // com.apollographql.execution.reporting/Trace.signature|{}signature[0]
        final fun <get-signature>(): kotlin/String // com.apollographql.execution.reporting/Trace.signature.<get-signature>|<get-signature>(){}[0]
    final val start_time // com.apollographql.execution.reporting/Trace.start_time|{}start_time[0]
        final fun <get-start_time>(): com.squareup.wire/Instant? // com.apollographql.execution.reporting/Trace.start_time.<get-start_time>|<get-start_time>(){}[0]
    final val unexecutedOperationBody // com.apollographql.execution.reporting/Trace.unexecutedOperationBody|{}unexecutedOperationBody[0]
        final fun <get-unexecutedOperationBody>(): kotlin/String // com.apollographql.execution.reporting/Trace.unexecutedOperationBody.<get-unexecutedOperationBody>|<get-unexecutedOperationBody>(){}[0]
    final val unexecutedOperationName // com.apollographql.execution.reporting/Trace.unexecutedOperationName|{}unexecutedOperationName[0]
        final fun <get-unexecutedOperationName>(): kotlin/String // com.apollographql.execution.reporting/Trace.unexecutedOperationName.<get-unexecutedOperationName>|<get-unexecutedOperationName>(){}[0]
}
final class com.apollographql.execution.reporting/TracesAndStats : com.squareup.wire/Message<com.apollographql.execution.reporting/TracesAndStats, kotlin/Nothing> { // com.apollographql.execution.reporting/TracesAndStats|null[0]
    constructor <init>(kotlin.collections/List<com.apollographql.execution.reporting/Trace> = ..., kotlin.collections/List<com.apollographql.execution.reporting/ContextualizedStats> = ..., kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/ReferencedFieldsForType> = ..., kotlin.collections/List<com.apollographql.execution.reporting/Trace> = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/TracesAndStats.<init>|<init>(kotlin.collections.List<com.apollographql.execution.reporting.Trace>;kotlin.collections.List<com.apollographql.execution.reporting.ContextualizedStats>;kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.ReferencedFieldsForType>;kotlin.collections.List<com.apollographql.execution.reporting.Trace>;okio.ByteString){}[0]
    final fun copy(kotlin.collections/List<com.apollographql.execution.reporting/Trace> = ..., kotlin.collections/List<com.apollographql.execution.reporting/ContextualizedStats> = ..., kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/ReferencedFieldsForType> = ..., kotlin.collections/List<com.apollographql.execution.reporting/Trace> = ..., okio/ByteString = ...): com.apollographql.execution.reporting/TracesAndStats // com.apollographql.execution.reporting/TracesAndStats.copy|copy(kotlin.collections.List<com.apollographql.execution.reporting.Trace>;kotlin.collections.List<com.apollographql.execution.reporting.ContextualizedStats>;kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.ReferencedFieldsForType>;kotlin.collections.List<com.apollographql.execution.reporting.Trace>;okio.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/TracesAndStats.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/TracesAndStats.hashCode|hashCode(){}[0]
    final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/TracesAndStats.newBuilder|newBuilder(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.reporting/TracesAndStats.toString|toString(){}[0]
    final object Companion { // com.apollographql.execution.reporting/TracesAndStats.Companion|null[0]
        final val ADAPTER // com.apollographql.execution.reporting/TracesAndStats.Companion.ADAPTER|{}ADAPTER[0]
            final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/TracesAndStats> // com.apollographql.execution.reporting/TracesAndStats.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
    }
    final val internal_traces_contributing_to_stats // com.apollographql.execution.reporting/TracesAndStats.internal_traces_contributing_to_stats|{}internal_traces_contributing_to_stats[0]
        final fun <get-internal_traces_contributing_to_stats>(): kotlin.collections/List<com.apollographql.execution.reporting/Trace> // com.apollographql.execution.reporting/TracesAndStats.internal_traces_contributing_to_stats.<get-internal_traces_contributing_to_stats>|<get-internal_traces_contributing_to_stats>(){}[0]
    final val referenced_fields_by_type // com.apollographql.execution.reporting/TracesAndStats.referenced_fields_by_type|{}referenced_fields_by_type[0]
        final fun <get-referenced_fields_by_type>(): kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/ReferencedFieldsForType> // com.apollographql.execution.reporting/TracesAndStats.referenced_fields_by_type.<get-referenced_fields_by_type>|<get-referenced_fields_by_type>(){}[0]
    final val stats_with_context // com.apollographql.execution.reporting/TracesAndStats.stats_with_context|{}stats_with_context[0]
        final fun <get-stats_with_context>(): kotlin.collections/List<com.apollographql.execution.reporting/ContextualizedStats> // com.apollographql.execution.reporting/TracesAndStats.stats_with_context.<get-stats_with_context>|<get-stats_with_context>(){}[0]
    final val trace // com.apollographql.execution.reporting/TracesAndStats.trace|{}trace[0]
        final fun <get-trace>(): kotlin.collections/List<com.apollographql.execution.reporting/Trace> // com.apollographql.execution.reporting/TracesAndStats.trace.<get-trace>|<get-trace>(){}[0]
}
final class com.apollographql.execution.reporting/TypeStat : com.squareup.wire/Message<com.apollographql.execution.reporting/TypeStat, kotlin/Nothing> { // com.apollographql.execution.reporting/TypeStat|null[0]
    constructor <init>(kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/FieldStat> = ..., okio/ByteString = ...) // com.apollographql.execution.reporting/TypeStat.<init>|<init>(kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.FieldStat>;okio.ByteString){}[0]
    final fun copy(kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/FieldStat> = ..., okio/ByteString = ...): com.apollographql.execution.reporting/TypeStat // com.apollographql.execution.reporting/TypeStat.copy|copy(kotlin.collections.Map<kotlin.String,com.apollographql.execution.reporting.FieldStat>;okio.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.execution.reporting/TypeStat.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.execution.reporting/TypeStat.hashCode|hashCode(){}[0]
    final fun newBuilder(): kotlin/Nothing // com.apollographql.execution.reporting/TypeStat.newBuilder|newBuilder(){}[0]
    final fun toString(): kotlin/String // com.apollographql.execution.reporting/TypeStat.toString|toString(){}[0]
    final object Companion { // com.apollographql.execution.reporting/TypeStat.Companion|null[0]
        final val ADAPTER // com.apollographql.execution.reporting/TypeStat.Companion.ADAPTER|{}ADAPTER[0]
            final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.apollographql.execution.reporting/TypeStat> // com.apollographql.execution.reporting/TypeStat.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
    }
    final val per_field_stat // com.apollographql.execution.reporting/TypeStat.per_field_stat|{}per_field_stat[0]
        final fun <get-per_field_stat>(): kotlin.collections/Map<kotlin/String, com.apollographql.execution.reporting/FieldStat> // com.apollographql.execution.reporting/TypeStat.per_field_stat.<get-per_field_stat>|<get-per_field_stat>(){}[0]
}
